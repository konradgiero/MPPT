
MPPT-V_1_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004d04  08004d04  00014d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d1c  08004d1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d24  08004d24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d24  08004d24  00014d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000000c  08004d38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08004d38  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010048  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002697  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00032720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00033508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022529  00000000  00000000  000341b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110ae  00000000  00000000  000566e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4153  00000000  00000000  0006778f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013b8e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a4  00000000  00000000  0013b938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cec 	.word	0x08004cec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004cec 	.word	0x08004cec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_Init+0x40>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <HAL_Init+0x40>)
 80004ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <HAL_Init+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <HAL_Init+0x40>)
 80004d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <HAL_Init+0x40>)
 80004e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e8:	2003      	movs	r0, #3
 80004ea:	f001 f8b7 	bl	800165c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 f808 	bl	8000504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f4:	f003 fe8e 	bl	8004214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40023c00 	.word	0x40023c00

08000504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_InitTick+0x54>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_InitTick+0x58>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	fbb3 f3f1 	udiv	r3, r3, r1
 800051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f001 f8cf 	bl	80016c6 <HAL_SYSTICK_Config>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800052e:	2301      	movs	r3, #1
 8000530:	e00e      	b.n	8000550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b0f      	cmp	r3, #15
 8000536:	d80a      	bhi.n	800054e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	2200      	movs	r2, #0
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f001 f897 	bl	8001672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <HAL_InitTick+0x5c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800054a:	2300      	movs	r3, #0
 800054c:	e000      	b.n	8000550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000008 	.word	0x20000008
 800055c:	20000004 	.word	0x20000004
 8000560:	20000000 	.word	0x20000000

08000564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_IncTick+0x20>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_IncTick+0x24>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4413      	add	r3, r2
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_IncTick+0x24>)
 8000576:	6013      	str	r3, [r2, #0]
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000004 	.word	0x20000004
 8000588:	20000028 	.word	0x20000028

0800058c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return uwTick;
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <HAL_GetTick+0x14>)
 8000592:	681b      	ldr	r3, [r3, #0]
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005ac:	f7ff ffee 	bl	800058c <HAL_GetTick>
 80005b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005bc:	d005      	beq.n	80005ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_Delay+0x44>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4413      	add	r3, r2
 80005c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ca:	bf00      	nop
 80005cc:	f7ff ffde 	bl	800058c <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d8f7      	bhi.n	80005cc <HAL_Delay+0x28>
  {
  }
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000004 	.word	0x20000004

080005ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e033      	b.n	800066a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	2b00      	cmp	r3, #0
 8000608:	d109      	bne.n	800061e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f003 fa50 	bl	8003ab0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	f003 0310 	and.w	r3, r3, #16
 8000626:	2b00      	cmp	r3, #0
 8000628:	d118      	bne.n	800065c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000632:	f023 0302 	bic.w	r3, r3, #2
 8000636:	f043 0202 	orr.w	r2, r3, #2
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 fa68 	bl	8000b14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f023 0303 	bic.w	r3, r3, #3
 8000652:	f043 0201 	orr.w	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	641a      	str	r2, [r3, #64]	; 0x40
 800065a:	e001      	b.n	8000660 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800065c:	2301      	movs	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000668:	7bfb      	ldrb	r3, [r7, #15]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800068a:	2b01      	cmp	r3, #1
 800068c:	d101      	bne.n	8000692 <HAL_ADC_Start_DMA+0x1e>
 800068e:	2302      	movs	r3, #2
 8000690:	e0e9      	b.n	8000866 <HAL_ADC_Start_DMA+0x1f2>
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2201      	movs	r2, #1
 8000696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d018      	beq.n	80006da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f042 0201 	orr.w	r2, r2, #1
 80006b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006b8:	4b6d      	ldr	r3, [pc, #436]	; (8000870 <HAL_ADC_Start_DMA+0x1fc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a6d      	ldr	r2, [pc, #436]	; (8000874 <HAL_ADC_Start_DMA+0x200>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	0c9a      	lsrs	r2, r3, #18
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80006cc:	e002      	b.n	80006d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f9      	bne.n	80006ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006e8:	d107      	bne.n	80006fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80006f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	2b01      	cmp	r3, #1
 8000706:	f040 80a1 	bne.w	800084c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000712:	f023 0301 	bic.w	r3, r3, #1
 8000716:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000728:	2b00      	cmp	r3, #0
 800072a:	d007      	beq.n	800073c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000734:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000748:	d106      	bne.n	8000758 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	f023 0206 	bic.w	r2, r3, #6
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	645a      	str	r2, [r3, #68]	; 0x44
 8000756:	e002      	b.n	800075e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	2200      	movs	r2, #0
 800075c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2200      	movs	r2, #0
 8000762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000766:	4b44      	ldr	r3, [pc, #272]	; (8000878 <HAL_ADC_Start_DMA+0x204>)
 8000768:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800076e:	4a43      	ldr	r2, [pc, #268]	; (800087c <HAL_ADC_Start_DMA+0x208>)
 8000770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000776:	4a42      	ldr	r2, [pc, #264]	; (8000880 <HAL_ADC_Start_DMA+0x20c>)
 8000778:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800077e:	4a41      	ldr	r2, [pc, #260]	; (8000884 <HAL_ADC_Start_DMA+0x210>)
 8000780:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800078a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800079a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	689a      	ldr	r2, [r3, #8]
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	334c      	adds	r3, #76	; 0x4c
 80007b6:	4619      	mov	r1, r3
 80007b8:	68ba      	ldr	r2, [r7, #8]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f001 f83e 	bl	800183c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f003 031f 	and.w	r3, r3, #31
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d12a      	bne.n	8000822 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a2d      	ldr	r2, [pc, #180]	; (8000888 <HAL_ADC_Start_DMA+0x214>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d015      	beq.n	8000802 <HAL_ADC_Start_DMA+0x18e>
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a2c      	ldr	r2, [pc, #176]	; (800088c <HAL_ADC_Start_DMA+0x218>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d105      	bne.n	80007ec <HAL_ADC_Start_DMA+0x178>
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <HAL_ADC_Start_DMA+0x204>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f003 031f 	and.w	r3, r3, #31
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00a      	beq.n	8000802 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a27      	ldr	r2, [pc, #156]	; (8000890 <HAL_ADC_Start_DMA+0x21c>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d136      	bne.n	8000864 <HAL_ADC_Start_DMA+0x1f0>
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <HAL_ADC_Start_DMA+0x204>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	f003 0310 	and.w	r3, r3, #16
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d130      	bne.n	8000864 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800080c:	2b00      	cmp	r3, #0
 800080e:	d129      	bne.n	8000864 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	689a      	ldr	r2, [r3, #8]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	e020      	b.n	8000864 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a18      	ldr	r2, [pc, #96]	; (8000888 <HAL_ADC_Start_DMA+0x214>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d11b      	bne.n	8000864 <HAL_ADC_Start_DMA+0x1f0>
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000836:	2b00      	cmp	r3, #0
 8000838:	d114      	bne.n	8000864 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	e00b      	b.n	8000864 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f043 0210 	orr.w	r2, r3, #16
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085c:	f043 0201 	orr.w	r2, r3, #1
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000008 	.word	0x20000008
 8000874:	431bde83 	.word	0x431bde83
 8000878:	40012300 	.word	0x40012300
 800087c:	08000d0d 	.word	0x08000d0d
 8000880:	08000dc7 	.word	0x08000dc7
 8000884:	08000de3 	.word	0x08000de3
 8000888:	40012000 	.word	0x40012000
 800088c:	40012100 	.word	0x40012100
 8000890:	40012200 	.word	0x40012200

08000894 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d101      	bne.n	80008ec <HAL_ADC_ConfigChannel+0x1c>
 80008e8:	2302      	movs	r3, #2
 80008ea:	e105      	b.n	8000af8 <HAL_ADC_ConfigChannel+0x228>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2201      	movs	r2, #1
 80008f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b09      	cmp	r3, #9
 80008fa:	d925      	bls.n	8000948 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	68d9      	ldr	r1, [r3, #12]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	b29b      	uxth	r3, r3
 8000908:	461a      	mov	r2, r3
 800090a:	4613      	mov	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4413      	add	r3, r2
 8000910:	3b1e      	subs	r3, #30
 8000912:	2207      	movs	r2, #7
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	43da      	mvns	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	400a      	ands	r2, r1
 8000920:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68d9      	ldr	r1, [r3, #12]
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	b29b      	uxth	r3, r3
 8000932:	4618      	mov	r0, r3
 8000934:	4603      	mov	r3, r0
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4403      	add	r3, r0
 800093a:	3b1e      	subs	r3, #30
 800093c:	409a      	lsls	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	430a      	orrs	r2, r1
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	e022      	b.n	800098e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6919      	ldr	r1, [r3, #16]
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	b29b      	uxth	r3, r3
 8000954:	461a      	mov	r2, r3
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	2207      	movs	r2, #7
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	400a      	ands	r2, r1
 800096a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6919      	ldr	r1, [r3, #16]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	689a      	ldr	r2, [r3, #8]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	b29b      	uxth	r3, r3
 800097c:	4618      	mov	r0, r3
 800097e:	4603      	mov	r3, r0
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	4403      	add	r3, r0
 8000984:	409a      	lsls	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	430a      	orrs	r2, r1
 800098c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	2b06      	cmp	r3, #6
 8000994:	d824      	bhi.n	80009e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	3b05      	subs	r3, #5
 80009a8:	221f      	movs	r2, #31
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43da      	mvns	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	400a      	ands	r2, r1
 80009b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685a      	ldr	r2, [r3, #4]
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	3b05      	subs	r3, #5
 80009d2:	fa00 f203 	lsl.w	r2, r0, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	430a      	orrs	r2, r1
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
 80009de:	e04c      	b.n	8000a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b0c      	cmp	r3, #12
 80009e6:	d824      	bhi.n	8000a32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	4613      	mov	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	3b23      	subs	r3, #35	; 0x23
 80009fa:	221f      	movs	r2, #31
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43da      	mvns	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	400a      	ands	r2, r1
 8000a08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	3b23      	subs	r3, #35	; 0x23
 8000a24:	fa00 f203 	lsl.w	r2, r0, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8000a30:	e023      	b.n	8000a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	3b41      	subs	r3, #65	; 0x41
 8000a44:	221f      	movs	r2, #31
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	400a      	ands	r2, r1
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	4613      	mov	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	3b41      	subs	r3, #65	; 0x41
 8000a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	430a      	orrs	r2, r1
 8000a78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a7a:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <HAL_ADC_ConfigChannel+0x234>)
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a21      	ldr	r2, [pc, #132]	; (8000b08 <HAL_ADC_ConfigChannel+0x238>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d109      	bne.n	8000a9c <HAL_ADC_ConfigChannel+0x1cc>
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b12      	cmp	r3, #18
 8000a8e:	d105      	bne.n	8000a9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_ADC_ConfigChannel+0x238>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d123      	bne.n	8000aee <HAL_ADC_ConfigChannel+0x21e>
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b10      	cmp	r3, #16
 8000aac:	d003      	beq.n	8000ab6 <HAL_ADC_ConfigChannel+0x1e6>
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b11      	cmp	r3, #17
 8000ab4:	d11b      	bne.n	8000aee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b10      	cmp	r3, #16
 8000ac8:	d111      	bne.n	8000aee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_ADC_ConfigChannel+0x23c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <HAL_ADC_ConfigChannel+0x240>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	0c9a      	lsrs	r2, r3, #18
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4413      	add	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000ae0:	e002      	b.n	8000ae8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f9      	bne.n	8000ae2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40012300 	.word	0x40012300
 8000b08:	40012000 	.word	0x40012000
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	431bde83 	.word	0x431bde83

08000b14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b1c:	4b79      	ldr	r3, [pc, #484]	; (8000d04 <ADC_Init+0x1f0>)
 8000b1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	431a      	orrs	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6859      	ldr	r1, [r3, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	021a      	lsls	r2, r3, #8
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6859      	ldr	r1, [r3, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689a      	ldr	r2, [r3, #8]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6899      	ldr	r1, [r3, #8]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68da      	ldr	r2, [r3, #12]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba6:	4a58      	ldr	r2, [pc, #352]	; (8000d08 <ADC_Init+0x1f4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d022      	beq.n	8000bf2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6899      	ldr	r1, [r3, #8]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6899      	ldr	r1, [r3, #8]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	430a      	orrs	r2, r1
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	e00f      	b.n	8000c12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 0202 	bic.w	r2, r2, #2
 8000c20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6899      	ldr	r1, [r3, #8]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7e1b      	ldrb	r3, [r3, #24]
 8000c2c:	005a      	lsls	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	430a      	orrs	r2, r1
 8000c34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d01b      	beq.n	8000c78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000c5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6859      	ldr	r1, [r3, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	035a      	lsls	r2, r3, #13
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	430a      	orrs	r2, r1
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	e007      	b.n	8000c88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	051a      	lsls	r2, r3, #20
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	430a      	orrs	r2, r1
 8000cac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6899      	ldr	r1, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cca:	025a      	lsls	r2, r3, #9
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6899      	ldr	r1, [r3, #8]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	029a      	lsls	r2, r3, #10
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	609a      	str	r2, [r3, #8]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	40012300 	.word	0x40012300
 8000d08:	0f000001 	.word	0x0f000001

08000d0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d13c      	bne.n	8000da0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d12b      	bne.n	8000d98 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d127      	bne.n	8000d98 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d119      	bne.n	8000d98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0220 	bic.w	r2, r2, #32
 8000d72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d105      	bne.n	8000d98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f043 0201 	orr.w	r2, r3, #1
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff fd7b 	bl	8000894 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8000d9e:	e00e      	b.n	8000dbe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 0310 	and.w	r3, r3, #16
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f7ff fd85 	bl	80008bc <HAL_ADC_ErrorCallback>
}
 8000db2:	e004      	b.n	8000dbe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	4798      	blx	r3
}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f7ff fd67 	bl	80008a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2240      	movs	r2, #64	; 0x40
 8000df4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f043 0204 	orr.w	r2, r3, #4
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f7ff fd5a 	bl	80008bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e0ed      	b.n	8000ffe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d102      	bne.n	8000e34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f002 feee 	bl	8003c10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0201 	orr.w	r2, r2, #1
 8000e42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e44:	f7ff fba2 	bl	800058c <HAL_GetTick>
 8000e48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e4a:	e012      	b.n	8000e72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e4c:	f7ff fb9e 	bl	800058c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b0a      	cmp	r3, #10
 8000e58:	d90b      	bls.n	8000e72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2205      	movs	r2, #5
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e0c5      	b.n	8000ffe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0e5      	beq.n	8000e4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0202 	bic.w	r2, r2, #2
 8000e8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e90:	f7ff fb7c 	bl	800058c <HAL_GetTick>
 8000e94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e96:	e012      	b.n	8000ebe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e98:	f7ff fb78 	bl	800058c <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	d90b      	bls.n	8000ebe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eaa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e09f      	b.n	8000ffe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1e5      	bne.n	8000e98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7e1b      	ldrb	r3, [r3, #24]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d108      	bne.n	8000ee6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	e007      	b.n	8000ef6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7e5b      	ldrb	r3, [r3, #25]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d108      	bne.n	8000f10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e007      	b.n	8000f20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7e9b      	ldrb	r3, [r3, #26]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d108      	bne.n	8000f3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f042 0220 	orr.w	r2, r2, #32
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	e007      	b.n	8000f4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 0220 	bic.w	r2, r2, #32
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	7edb      	ldrb	r3, [r3, #27]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d108      	bne.n	8000f64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0210 	bic.w	r2, r2, #16
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	e007      	b.n	8000f74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0210 	orr.w	r2, r2, #16
 8000f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7f1b      	ldrb	r3, [r3, #28]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d108      	bne.n	8000f8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0208 	orr.w	r2, r2, #8
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	e007      	b.n	8000f9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0208 	bic.w	r2, r2, #8
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7f5b      	ldrb	r3, [r3, #29]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d108      	bne.n	8000fb8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 0204 	orr.w	r2, r2, #4
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e007      	b.n	8000fc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0204 	bic.w	r2, r2, #4
 8000fc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	ea42 0103 	orr.w	r1, r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	1e5a      	subs	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001020:	7cfb      	ldrb	r3, [r7, #19]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d003      	beq.n	800102e <HAL_CAN_ConfigFilter+0x26>
 8001026:	7cfb      	ldrb	r3, [r7, #19]
 8001028:	2b02      	cmp	r3, #2
 800102a:	f040 80be 	bne.w	80011aa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800102e:	4b65      	ldr	r3, [pc, #404]	; (80011c4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001030:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001038:	f043 0201 	orr.w	r2, r3, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001048:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	431a      	orrs	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f003 031f 	and.w	r3, r3, #31
 800106e:	2201      	movs	r2, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	401a      	ands	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d123      	bne.n	80010d8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43db      	mvns	r3, r3
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3248      	adds	r2, #72	; 0x48
 80010b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010ce:	6979      	ldr	r1, [r7, #20]
 80010d0:	3348      	adds	r3, #72	; 0x48
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d122      	bne.n	8001126 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	431a      	orrs	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001100:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3248      	adds	r2, #72	; 0x48
 8001106:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800111a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800111c:	6979      	ldr	r1, [r7, #20]
 800111e:	3348      	adds	r3, #72	; 0x48
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d109      	bne.n	8001142 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43db      	mvns	r3, r3
 8001138:	401a      	ands	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001140:	e007      	b.n	8001152 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	431a      	orrs	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	401a      	ands	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800116c:	e007      	b.n	800117e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	431a      	orrs	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	431a      	orrs	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800119c:	f023 0201 	bic.w	r2, r3, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e006      	b.n	80011b8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
  }
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40006400 	.word	0x40006400

080011c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d12e      	bne.n	800123a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011f4:	f7ff f9ca 	bl	800058c <HAL_GetTick>
 80011f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011fa:	e012      	b.n	8001222 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011fc:	f7ff f9c6 	bl	800058c <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b0a      	cmp	r3, #10
 8001208:	d90b      	bls.n	8001222 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2205      	movs	r2, #5
 800121a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e012      	b.n	8001248 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1e5      	bne.n	80011fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e006      	b.n	8001248 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
  }
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001264:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800126e:	7ffb      	ldrb	r3, [r7, #31]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d003      	beq.n	800127c <HAL_CAN_AddTxMessage+0x2c>
 8001274:	7ffb      	ldrb	r3, [r7, #31]
 8001276:	2b02      	cmp	r3, #2
 8001278:	f040 80b8 	bne.w	80013ec <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10a      	bne.n	800129c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800128c:	2b00      	cmp	r3, #0
 800128e:	d105      	bne.n	800129c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80a0 	beq.w	80013dc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	0e1b      	lsrs	r3, r3, #24
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d907      	bls.n	80012bc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e09e      	b.n	80013fa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012bc:	2201      	movs	r2, #1
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	409a      	lsls	r2, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10d      	bne.n	80012ea <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012d8:	68f9      	ldr	r1, [r7, #12]
 80012da:	6809      	ldr	r1, [r1, #0]
 80012dc:	431a      	orrs	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3318      	adds	r3, #24
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	440b      	add	r3, r1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e00f      	b.n	800130a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012f4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012fa:	68f9      	ldr	r1, [r7, #12]
 80012fc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012fe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3318      	adds	r3, #24
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	440b      	add	r3, r1
 8001308:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3318      	adds	r3, #24
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	440b      	add	r3, r1
 800131a:	3304      	adds	r3, #4
 800131c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	7d1b      	ldrb	r3, [r3, #20]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d111      	bne.n	800134a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3318      	adds	r3, #24
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4413      	add	r3, r2
 8001332:	3304      	adds	r3, #4
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	6811      	ldr	r1, [r2, #0]
 800133a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3318      	adds	r3, #24
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	440b      	add	r3, r1
 8001346:	3304      	adds	r3, #4
 8001348:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3307      	adds	r3, #7
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	061a      	lsls	r2, r3, #24
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3306      	adds	r3, #6
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3305      	adds	r3, #5
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	4313      	orrs	r3, r2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	3204      	adds	r2, #4
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	4610      	mov	r0, r2
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	6811      	ldr	r1, [r2, #0]
 8001372:	ea43 0200 	orr.w	r2, r3, r0
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	440b      	add	r3, r1
 800137c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001380:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3303      	adds	r3, #3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	061a      	lsls	r2, r3, #24
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3302      	adds	r3, #2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3301      	adds	r3, #1
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	4313      	orrs	r3, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	7812      	ldrb	r2, [r2, #0]
 80013a2:	4610      	mov	r0, r2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	6811      	ldr	r1, [r2, #0]
 80013a8:	ea43 0200 	orr.w	r2, r3, r0
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	440b      	add	r3, r1
 80013b2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3318      	adds	r3, #24
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	4413      	add	r3, r2
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	6811      	ldr	r1, [r2, #0]
 80013ca:	f043 0201 	orr.w	r2, r3, #1
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3318      	adds	r3, #24
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	440b      	add	r3, r1
 80013d6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	e00e      	b.n	80013fa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e006      	b.n	80013fa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
  }
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001418:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800141a:	7afb      	ldrb	r3, [r7, #11]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d002      	beq.n	8001426 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d11d      	bne.n	8001462 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3301      	adds	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3301      	adds	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001480:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d002      	beq.n	800148e <HAL_CAN_ActivateNotification+0x1e>
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d109      	bne.n	80014a2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6959      	ldr	r1, [r3, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e006      	b.n	80014b0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
  }
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db0b      	blt.n	800154a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4907      	ldr	r1, [pc, #28]	; (8001558 <__NVIC_EnableIRQ+0x38>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	2001      	movs	r0, #1
 8001542:	fa00 f202 	lsl.w	r2, r0, r2
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000e100 	.word	0xe000e100

0800155c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	; (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	; (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f1c3 0307 	rsb	r3, r3, #7
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf28      	it	cs
 80015ce:	2304      	movcs	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d902      	bls.n	80015e0 <NVIC_EncodePriority+0x30>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3b03      	subs	r3, #3
 80015de:	e000      	b.n	80015e2 <NVIC_EncodePriority+0x32>
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43d9      	mvns	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	4313      	orrs	r3, r2
         );
}
 800160a:	4618      	mov	r0, r3
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001628:	d301      	bcc.n	800162e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <SysTick_Config+0x40>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001636:	210f      	movs	r1, #15
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f7ff ff8e 	bl	800155c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <SysTick_Config+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <SysTick_Config+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff29 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001684:	f7ff ff3e 	bl	8001504 <__NVIC_GetPriorityGrouping>
 8001688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7ff ff8e 	bl	80015b0 <NVIC_EncodePriority>
 8001694:	4602      	mov	r2, r0
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff5d 	bl	800155c <__NVIC_SetPriority>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff31 	bl	8001520 <__NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffa2 	bl	8001618 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7fe ff4e 	bl	800058c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e099      	b.n	8001830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800171c:	e00f      	b.n	800173e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800171e:	f7fe ff35 	bl	800058c <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b05      	cmp	r3, #5
 800172a:	d908      	bls.n	800173e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2220      	movs	r2, #32
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2203      	movs	r2, #3
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e078      	b.n	8001830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e8      	bne.n	800171e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_DMA_Init+0x158>)
 8001758:	4013      	ands	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800176a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4313      	orrs	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	2b04      	cmp	r3, #4
 8001796:	d107      	bne.n	80017a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4313      	orrs	r3, r2
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f023 0307 	bic.w	r3, r3, #7
 80017be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d117      	bne.n	8001802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4313      	orrs	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00e      	beq.n	8001802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fa6f 	bl	8001cc8 <DMA_CheckFifoParam>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2240      	movs	r2, #64	; 0x40
 80017f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017fe:	2301      	movs	r3, #1
 8001800:	e016      	b.n	8001830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fa26 	bl	8001c5c <DMA_CalcBaseAndBitshift>
 8001810:	4603      	mov	r3, r0
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	223f      	movs	r2, #63	; 0x3f
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	f010803f 	.word	0xf010803f

0800183c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_DMA_Start_IT+0x26>
 800185e:	2302      	movs	r3, #2
 8001860:	e040      	b.n	80018e4 <HAL_DMA_Start_IT+0xa8>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d12f      	bne.n	80018d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2202      	movs	r2, #2
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 f9b8 	bl	8001c00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001894:	223f      	movs	r2, #63	; 0x3f
 8001896:	409a      	lsls	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0216 	orr.w	r2, r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d007      	beq.n	80018c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0208 	orr.w	r2, r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e005      	b.n	80018e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018de:	2302      	movs	r3, #2
 80018e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018f8:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <HAL_DMA_IRQHandler+0x258>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a92      	ldr	r2, [pc, #584]	; (8001b48 <HAL_DMA_IRQHandler+0x25c>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0a9b      	lsrs	r3, r3, #10
 8001904:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001916:	2208      	movs	r2, #8
 8001918:	409a      	lsls	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4013      	ands	r3, r2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d01a      	beq.n	8001958 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0204 	bic.w	r2, r2, #4
 800193e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	2208      	movs	r2, #8
 8001946:	409a      	lsls	r2, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195c:	2201      	movs	r2, #1
 800195e:	409a      	lsls	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d012      	beq.n	800198e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	2201      	movs	r2, #1
 800197c:	409a      	lsls	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001986:	f043 0202 	orr.w	r2, r3, #2
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001992:	2204      	movs	r2, #4
 8001994:	409a      	lsls	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d012      	beq.n	80019c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00b      	beq.n	80019c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b0:	2204      	movs	r2, #4
 80019b2:	409a      	lsls	r2, r3
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019bc:	f043 0204 	orr.w	r2, r3, #4
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c8:	2210      	movs	r2, #16
 80019ca:	409a      	lsls	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d043      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d03c      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e6:	2210      	movs	r2, #16
 80019e8:	409a      	lsls	r2, r3
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d018      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d108      	bne.n	8001a1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d024      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	4798      	blx	r3
 8001a1a:	e01f      	b.n	8001a5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d01b      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	4798      	blx	r3
 8001a2c:	e016      	b.n	8001a5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d107      	bne.n	8001a4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0208 	bic.w	r2, r2, #8
 8001a4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	2220      	movs	r2, #32
 8001a62:	409a      	lsls	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 808e 	beq.w	8001b8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 8086 	beq.w	8001b8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a82:	2220      	movs	r2, #32
 8001a84:	409a      	lsls	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d136      	bne.n	8001b04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0216 	bic.w	r2, r2, #22
 8001aa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ab4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d103      	bne.n	8001ac6 <HAL_DMA_IRQHandler+0x1da>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0208 	bic.w	r2, r2, #8
 8001ad4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ada:	223f      	movs	r2, #63	; 0x3f
 8001adc:	409a      	lsls	r2, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d07d      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
        }
        return;
 8001b02:	e078      	b.n	8001bf6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d01c      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d108      	bne.n	8001b32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d030      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	4798      	blx	r3
 8001b30:	e02b      	b.n	8001b8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d027      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	4798      	blx	r3
 8001b42:	e022      	b.n	8001b8a <HAL_DMA_IRQHandler+0x29e>
 8001b44:	20000008 	.word	0x20000008
 8001b48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0210 	bic.w	r2, r2, #16
 8001b68:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d032      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d022      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2205      	movs	r2, #5
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d307      	bcc.n	8001bd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f2      	bne.n	8001bb6 <HAL_DMA_IRQHandler+0x2ca>
 8001bd0:	e000      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001bd2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
 8001bf4:	e000      	b.n	8001bf8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bf6:	bf00      	nop
    }
  }
}
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop

08001c00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b40      	cmp	r3, #64	; 0x40
 8001c2c:	d108      	bne.n	8001c40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c3e:	e007      	b.n	8001c50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	60da      	str	r2, [r3, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	3b10      	subs	r3, #16
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c76:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d909      	bls.n	8001c9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c92:	f023 0303 	bic.w	r3, r3, #3
 8001c96:	1d1a      	adds	r2, r3, #4
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c9c:	e007      	b.n	8001cae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ca6:	f023 0303 	bic.w	r3, r3, #3
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	aaaaaaab 	.word	0xaaaaaaab
 8001cc4:	08004d04 	.word	0x08004d04

08001cc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d11f      	bne.n	8001d22 <DMA_CheckFifoParam+0x5a>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d856      	bhi.n	8001d96 <DMA_CheckFifoParam+0xce>
 8001ce8:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <DMA_CheckFifoParam+0x28>)
 8001cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cee:	bf00      	nop
 8001cf0:	08001d01 	.word	0x08001d01
 8001cf4:	08001d13 	.word	0x08001d13
 8001cf8:	08001d01 	.word	0x08001d01
 8001cfc:	08001d97 	.word	0x08001d97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d046      	beq.n	8001d9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d10:	e043      	b.n	8001d9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d1a:	d140      	bne.n	8001d9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d20:	e03d      	b.n	8001d9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2a:	d121      	bne.n	8001d70 <DMA_CheckFifoParam+0xa8>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d837      	bhi.n	8001da2 <DMA_CheckFifoParam+0xda>
 8001d32:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <DMA_CheckFifoParam+0x70>)
 8001d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d38:	08001d49 	.word	0x08001d49
 8001d3c:	08001d4f 	.word	0x08001d4f
 8001d40:	08001d49 	.word	0x08001d49
 8001d44:	08001d61 	.word	0x08001d61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d4c:	e030      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d025      	beq.n	8001da6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d5e:	e022      	b.n	8001da6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d68:	d11f      	bne.n	8001daa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d6e:	e01c      	b.n	8001daa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d903      	bls.n	8001d7e <DMA_CheckFifoParam+0xb6>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d003      	beq.n	8001d84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d7c:	e018      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
      break;
 8001d82:	e015      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00e      	beq.n	8001dae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
      break;
 8001d94:	e00b      	b.n	8001dae <DMA_CheckFifoParam+0xe6>
      break;
 8001d96:	bf00      	nop
 8001d98:	e00a      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      break;
 8001d9a:	bf00      	nop
 8001d9c:	e008      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      break;
 8001d9e:	bf00      	nop
 8001da0:	e006      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      break;
 8001da2:	bf00      	nop
 8001da4:	e004      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      break;
 8001da6:	bf00      	nop
 8001da8:	e002      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001daa:	bf00      	nop
 8001dac:	e000      	b.n	8001db0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dae:	bf00      	nop
    }
  } 
  
  return status; 
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	e16b      	b.n	80020b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	f040 815a 	bne.w	80020ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d005      	beq.n	8001e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d130      	bne.n	8001e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 0201 	and.w	r2, r3, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d017      	beq.n	8001eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d123      	bne.n	8001f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	08da      	lsrs	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3208      	adds	r2, #8
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	08da      	lsrs	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3208      	adds	r2, #8
 8001efe:	69b9      	ldr	r1, [r7, #24]
 8001f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0203 	and.w	r2, r3, #3
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80b4 	beq.w	80020ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b60      	ldr	r3, [pc, #384]	; (80020cc <HAL_GPIO_Init+0x30c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a5f      	ldr	r2, [pc, #380]	; (80020cc <HAL_GPIO_Init+0x30c>)
 8001f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b5d      	ldr	r3, [pc, #372]	; (80020cc <HAL_GPIO_Init+0x30c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f62:	4a5b      	ldr	r2, [pc, #364]	; (80020d0 <HAL_GPIO_Init+0x310>)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a52      	ldr	r2, [pc, #328]	; (80020d4 <HAL_GPIO_Init+0x314>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d02b      	beq.n	8001fe6 <HAL_GPIO_Init+0x226>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a51      	ldr	r2, [pc, #324]	; (80020d8 <HAL_GPIO_Init+0x318>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d025      	beq.n	8001fe2 <HAL_GPIO_Init+0x222>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a50      	ldr	r2, [pc, #320]	; (80020dc <HAL_GPIO_Init+0x31c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01f      	beq.n	8001fde <HAL_GPIO_Init+0x21e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4f      	ldr	r2, [pc, #316]	; (80020e0 <HAL_GPIO_Init+0x320>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d019      	beq.n	8001fda <HAL_GPIO_Init+0x21a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4e      	ldr	r2, [pc, #312]	; (80020e4 <HAL_GPIO_Init+0x324>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_GPIO_Init+0x216>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4d      	ldr	r2, [pc, #308]	; (80020e8 <HAL_GPIO_Init+0x328>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00d      	beq.n	8001fd2 <HAL_GPIO_Init+0x212>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4c      	ldr	r2, [pc, #304]	; (80020ec <HAL_GPIO_Init+0x32c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <HAL_GPIO_Init+0x20e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4b      	ldr	r2, [pc, #300]	; (80020f0 <HAL_GPIO_Init+0x330>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_GPIO_Init+0x20a>
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	e00e      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fca:	2308      	movs	r3, #8
 8001fcc:	e00c      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fce:	2306      	movs	r3, #6
 8001fd0:	e00a      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fd2:	2305      	movs	r3, #5
 8001fd4:	e008      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e004      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	f002 0203 	and.w	r2, r2, #3
 8001fee:	0092      	lsls	r2, r2, #2
 8001ff0:	4093      	lsls	r3, r2
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff8:	4935      	ldr	r1, [pc, #212]	; (80020d0 <HAL_GPIO_Init+0x310>)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002006:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_GPIO_Init+0x334>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800202a:	4a32      	ldr	r2, [pc, #200]	; (80020f4 <HAL_GPIO_Init+0x334>)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002030:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_GPIO_Init+0x334>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002054:	4a27      	ldr	r2, [pc, #156]	; (80020f4 <HAL_GPIO_Init+0x334>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <HAL_GPIO_Init+0x334>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207e:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <HAL_GPIO_Init+0x334>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_GPIO_Init+0x334>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a8:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_GPIO_Init+0x334>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3301      	adds	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b0f      	cmp	r3, #15
 80020b8:	f67f ae90 	bls.w	8001ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40013800 	.word	0x40013800
 80020d4:	40020000 	.word	0x40020000
 80020d8:	40020400 	.word	0x40020400
 80020dc:	40020800 	.word	0x40020800
 80020e0:	40020c00 	.word	0x40020c00
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40021400 	.word	0x40021400
 80020ec:	40021800 	.word	0x40021800
 80020f0:	40021c00 	.word	0x40021c00
 80020f4:	40013c00 	.word	0x40013c00

080020f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002108:	787b      	ldrb	r3, [r7, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002114:	e003      	b.n	800211e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	041a      	lsls	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	619a      	str	r2, [r3, #24]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e264      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d075      	beq.n	8002236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800214a:	4ba3      	ldr	r3, [pc, #652]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b04      	cmp	r3, #4
 8002154:	d00c      	beq.n	8002170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002156:	4ba0      	ldr	r3, [pc, #640]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215e:	2b08      	cmp	r3, #8
 8002160:	d112      	bne.n	8002188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002162:	4b9d      	ldr	r3, [pc, #628]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800216e:	d10b      	bne.n	8002188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	4b99      	ldr	r3, [pc, #612]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d05b      	beq.n	8002234 <HAL_RCC_OscConfig+0x108>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d157      	bne.n	8002234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e23f      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002190:	d106      	bne.n	80021a0 <HAL_RCC_OscConfig+0x74>
 8002192:	4b91      	ldr	r3, [pc, #580]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a90      	ldr	r2, [pc, #576]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e01d      	b.n	80021dc <HAL_RCC_OscConfig+0xb0>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x98>
 80021aa:	4b8b      	ldr	r3, [pc, #556]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a8a      	ldr	r2, [pc, #552]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a87      	ldr	r2, [pc, #540]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0xb0>
 80021c4:	4b84      	ldr	r3, [pc, #528]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a83      	ldr	r2, [pc, #524]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b81      	ldr	r3, [pc, #516]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a80      	ldr	r2, [pc, #512]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe f9d2 	bl	800058c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ec:	f7fe f9ce 	bl	800058c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e204      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b76      	ldr	r3, [pc, #472]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0xc0>
 800220a:	e014      	b.n	8002236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe f9be 	bl	800058c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe f9ba 	bl	800058c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e1f0      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	4b6c      	ldr	r3, [pc, #432]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0xe8>
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d063      	beq.n	800230a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002242:	4b65      	ldr	r3, [pc, #404]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224e:	4b62      	ldr	r3, [pc, #392]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002256:	2b08      	cmp	r3, #8
 8002258:	d11c      	bne.n	8002294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225a:	4b5f      	ldr	r3, [pc, #380]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d116      	bne.n	8002294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	4b5c      	ldr	r3, [pc, #368]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x152>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e1c4      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227e:	4b56      	ldr	r3, [pc, #344]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4952      	ldr	r1, [pc, #328]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	e03a      	b.n	800230a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800229c:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <HAL_RCC_OscConfig+0x2b0>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7fe f973 	bl	800058c <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022aa:	f7fe f96f 	bl	800058c <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e1a5      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4940      	ldr	r1, [pc, #256]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e015      	b.n	800230a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022de:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <HAL_RCC_OscConfig+0x2b0>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe f952 	bl	800058c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ec:	f7fe f94e 	bl	800058c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e184      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d030      	beq.n	8002378 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d016      	beq.n	800234c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_RCC_OscConfig+0x2b4>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7fe f932 	bl	800058c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232c:	f7fe f92e 	bl	800058c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e164      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x200>
 800234a:	e015      	b.n	8002378 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <HAL_RCC_OscConfig+0x2b4>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7fe f91b 	bl	800058c <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235a:	f7fe f917 	bl	800058c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e14d      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a0 	beq.w	80024c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_OscConfig+0x2b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d121      	bne.n	8002406 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_RCC_OscConfig+0x2b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_RCC_OscConfig+0x2b8>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7fe f8dd 	bl	800058c <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	e011      	b.n	80023fa <HAL_RCC_OscConfig+0x2ce>
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	42470000 	.word	0x42470000
 80023e0:	42470e80 	.word	0x42470e80
 80023e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e8:	f7fe f8d0 	bl	800058c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e106      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fa:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_RCC_OscConfig+0x4e4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d106      	bne.n	800241c <HAL_RCC_OscConfig+0x2f0>
 800240e:	4b81      	ldr	r3, [pc, #516]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a80      	ldr	r2, [pc, #512]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
 800241a:	e01c      	b.n	8002456 <HAL_RCC_OscConfig+0x32a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b05      	cmp	r3, #5
 8002422:	d10c      	bne.n	800243e <HAL_RCC_OscConfig+0x312>
 8002424:	4b7b      	ldr	r3, [pc, #492]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	4a7a      	ldr	r2, [pc, #488]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6713      	str	r3, [r2, #112]	; 0x70
 8002430:	4b78      	ldr	r3, [pc, #480]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	4a77      	ldr	r2, [pc, #476]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6713      	str	r3, [r2, #112]	; 0x70
 800243c:	e00b      	b.n	8002456 <HAL_RCC_OscConfig+0x32a>
 800243e:	4b75      	ldr	r3, [pc, #468]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002442:	4a74      	ldr	r2, [pc, #464]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6713      	str	r3, [r2, #112]	; 0x70
 800244a:	4b72      	ldr	r3, [pc, #456]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a71      	ldr	r2, [pc, #452]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002450:	f023 0304 	bic.w	r3, r3, #4
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d015      	beq.n	800248a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7fe f895 	bl	800058c <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7fe f891 	bl	800058c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0c5      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	4b65      	ldr	r3, [pc, #404]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ee      	beq.n	8002466 <HAL_RCC_OscConfig+0x33a>
 8002488:	e014      	b.n	80024b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7fe f87f 	bl	800058c <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fe f87b 	bl	800058c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0af      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	4b5a      	ldr	r3, [pc, #360]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ee      	bne.n	8002492 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ba:	4b56      	ldr	r3, [pc, #344]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a55      	ldr	r2, [pc, #340]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80024c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 809b 	beq.w	8002606 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d0:	4b50      	ldr	r3, [pc, #320]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d05c      	beq.n	8002596 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d141      	bne.n	8002568 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_OscConfig+0x4ec>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe f84f 	bl	800058c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe f84b 	bl	800058c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e081      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002504:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	019b      	lsls	r3, r3, #6
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	3b01      	subs	r3, #1
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	061b      	lsls	r3, r3, #24
 8002534:	4937      	ldr	r1, [pc, #220]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253a:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_RCC_OscConfig+0x4ec>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe f824 	bl	800058c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe f820 	bl	800058c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e056      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x41c>
 8002566:	e04e      	b.n	8002606 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002568:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <HAL_RCC_OscConfig+0x4ec>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7fe f80d 	bl	800058c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe f809 	bl	800058c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e03f      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f0      	bne.n	8002576 <HAL_RCC_OscConfig+0x44a>
 8002594:	e037      	b.n	8002606 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e032      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d028      	beq.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d121      	bne.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d11a      	bne.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d2:	4013      	ands	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025da:	4293      	cmp	r3, r2
 80025dc:	d111      	bne.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	3b01      	subs	r3, #1
 80025ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40007000 	.word	0x40007000
 8002614:	40023800 	.word	0x40023800
 8002618:	42470060 	.word	0x42470060

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0cc      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d90c      	bls.n	8002658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0b8      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800267a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002688:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	494d      	ldr	r1, [pc, #308]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d044      	beq.n	800273c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d119      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d003      	beq.n	80026da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e06f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e067      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4934      	ldr	r1, [pc, #208]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7fd ff3e 	bl	800058c <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7fd ff3a 	bl	800058c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e04f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d20c      	bcs.n	8002764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e032      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4916      	ldr	r1, [pc, #88]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	490e      	ldr	r1, [pc, #56]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a2:	f000 f821 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	490a      	ldr	r1, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	5ccb      	ldrb	r3, [r1, r3]
 80027b6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fe9e 	bl	8000504 <HAL_InitTick>

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00
 80027d8:	40023800 	.word	0x40023800
 80027dc:	08004d0c 	.word	0x08004d0c
 80027e0:	20000008 	.word	0x20000008
 80027e4:	20000000 	.word	0x20000000

080027e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	b5b0      	push	{r4, r5, r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ee:	2100      	movs	r1, #0
 80027f0:	6079      	str	r1, [r7, #4]
 80027f2:	2100      	movs	r1, #0
 80027f4:	60f9      	str	r1, [r7, #12]
 80027f6:	2100      	movs	r1, #0
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027fa:	2100      	movs	r1, #0
 80027fc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027fe:	4952      	ldr	r1, [pc, #328]	; (8002948 <HAL_RCC_GetSysClockFreq+0x160>)
 8002800:	6889      	ldr	r1, [r1, #8]
 8002802:	f001 010c 	and.w	r1, r1, #12
 8002806:	2908      	cmp	r1, #8
 8002808:	d00d      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x3e>
 800280a:	2908      	cmp	r1, #8
 800280c:	f200 8094 	bhi.w	8002938 <HAL_RCC_GetSysClockFreq+0x150>
 8002810:	2900      	cmp	r1, #0
 8002812:	d002      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x32>
 8002814:	2904      	cmp	r1, #4
 8002816:	d003      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x38>
 8002818:	e08e      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <HAL_RCC_GetSysClockFreq+0x164>)
 800281c:	60bb      	str	r3, [r7, #8]
       break;
 800281e:	e08e      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002820:	4b4b      	ldr	r3, [pc, #300]	; (8002950 <HAL_RCC_GetSysClockFreq+0x168>)
 8002822:	60bb      	str	r3, [r7, #8]
      break;
 8002824:	e08b      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002826:	4948      	ldr	r1, [pc, #288]	; (8002948 <HAL_RCC_GetSysClockFreq+0x160>)
 8002828:	6849      	ldr	r1, [r1, #4]
 800282a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800282e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002830:	4945      	ldr	r1, [pc, #276]	; (8002948 <HAL_RCC_GetSysClockFreq+0x160>)
 8002832:	6849      	ldr	r1, [r1, #4]
 8002834:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002838:	2900      	cmp	r1, #0
 800283a:	d024      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283c:	4942      	ldr	r1, [pc, #264]	; (8002948 <HAL_RCC_GetSysClockFreq+0x160>)
 800283e:	6849      	ldr	r1, [r1, #4]
 8002840:	0989      	lsrs	r1, r1, #6
 8002842:	4608      	mov	r0, r1
 8002844:	f04f 0100 	mov.w	r1, #0
 8002848:	f240 14ff 	movw	r4, #511	; 0x1ff
 800284c:	f04f 0500 	mov.w	r5, #0
 8002850:	ea00 0204 	and.w	r2, r0, r4
 8002854:	ea01 0305 	and.w	r3, r1, r5
 8002858:	493d      	ldr	r1, [pc, #244]	; (8002950 <HAL_RCC_GetSysClockFreq+0x168>)
 800285a:	fb01 f003 	mul.w	r0, r1, r3
 800285e:	2100      	movs	r1, #0
 8002860:	fb01 f102 	mul.w	r1, r1, r2
 8002864:	1844      	adds	r4, r0, r1
 8002866:	493a      	ldr	r1, [pc, #232]	; (8002950 <HAL_RCC_GetSysClockFreq+0x168>)
 8002868:	fba2 0101 	umull	r0, r1, r2, r1
 800286c:	1863      	adds	r3, r4, r1
 800286e:	4619      	mov	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	461a      	mov	r2, r3
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	f7fd fca6 	bl	80001c8 <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4613      	mov	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e04a      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002886:	4b30      	ldr	r3, [pc, #192]	; (8002948 <HAL_RCC_GetSysClockFreq+0x160>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	461a      	mov	r2, r3
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	ea02 0400 	and.w	r4, r2, r0
 800289e:	ea03 0501 	and.w	r5, r3, r1
 80028a2:	4620      	mov	r0, r4
 80028a4:	4629      	mov	r1, r5
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	014b      	lsls	r3, r1, #5
 80028b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028b4:	0142      	lsls	r2, r0, #5
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	1b00      	subs	r0, r0, r4
 80028bc:	eb61 0105 	sbc.w	r1, r1, r5
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	018b      	lsls	r3, r1, #6
 80028ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028ce:	0182      	lsls	r2, r0, #6
 80028d0:	1a12      	subs	r2, r2, r0
 80028d2:	eb63 0301 	sbc.w	r3, r3, r1
 80028d6:	f04f 0000 	mov.w	r0, #0
 80028da:	f04f 0100 	mov.w	r1, #0
 80028de:	00d9      	lsls	r1, r3, #3
 80028e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028e4:	00d0      	lsls	r0, r2, #3
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	1912      	adds	r2, r2, r4
 80028ec:	eb45 0303 	adc.w	r3, r5, r3
 80028f0:	f04f 0000 	mov.w	r0, #0
 80028f4:	f04f 0100 	mov.w	r1, #0
 80028f8:	0299      	lsls	r1, r3, #10
 80028fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028fe:	0290      	lsls	r0, r2, #10
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	461a      	mov	r2, r3
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	f7fd fc5a 	bl	80001c8 <__aeabi_uldivmod>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4613      	mov	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_RCC_GetSysClockFreq+0x160>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	3301      	adds	r3, #1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	60bb      	str	r3, [r7, #8]
      break;
 8002936:	e002      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_RCC_GetSysClockFreq+0x164>)
 800293a:	60bb      	str	r3, [r7, #8]
      break;
 800293c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800293e:	68bb      	ldr	r3, [r7, #8]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bdb0      	pop	{r4, r5, r7, pc}
 8002948:	40023800 	.word	0x40023800
 800294c:	00f42400 	.word	0x00f42400
 8002950:	017d7840 	.word	0x017d7840

08002954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e041      	b.n	80029ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f001 fe1a 	bl	80045b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3304      	adds	r3, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f000 fc70 	bl	8003278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d001      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e04e      	b.n	8002aaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d022      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a36:	d01d      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <HAL_TIM_Base_Start_IT+0xc8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d018      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1e      	ldr	r2, [pc, #120]	; (8002ac0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00e      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <HAL_TIM_Base_Start_IT+0xd8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x80>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d111      	bne.n	8002a98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d010      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a96:	e007      	b.n	8002aa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800
 8002ac4:	40000c00 	.word	0x40000c00
 8002ac8:	40010400 	.word	0x40010400
 8002acc:	40014000 	.word	0x40014000
 8002ad0:	40001800 	.word	0x40001800

08002ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e041      	b.n	8002b6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f001 fdb4 	bl	8004668 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f000 fbb0 	bl	8003278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_TIM_PWM_Start+0x24>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e022      	b.n	8002bde <HAL_TIM_PWM_Start+0x6a>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d109      	bne.n	8002bb2 <HAL_TIM_PWM_Start+0x3e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	e015      	b.n	8002bde <HAL_TIM_PWM_Start+0x6a>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d109      	bne.n	8002bcc <HAL_TIM_PWM_Start+0x58>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	e008      	b.n	8002bde <HAL_TIM_PWM_Start+0x6a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07c      	b.n	8002ce0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0x82>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf4:	e013      	b.n	8002c1e <HAL_TIM_PWM_Start+0xaa>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_PWM_Start+0x92>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c04:	e00b      	b.n	8002c1e <HAL_TIM_PWM_Start+0xaa>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_PWM_Start+0xa2>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c14:	e003      	b.n	8002c1e <HAL_TIM_PWM_Start+0xaa>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2201      	movs	r2, #1
 8002c24:	6839      	ldr	r1, [r7, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fe10 	bl	800384c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a2d      	ldr	r2, [pc, #180]	; (8002ce8 <HAL_TIM_PWM_Start+0x174>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_TIM_PWM_Start+0xcc>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a2c      	ldr	r2, [pc, #176]	; (8002cec <HAL_TIM_PWM_Start+0x178>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIM_PWM_Start+0xd0>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_TIM_PWM_Start+0xd2>
 8002c44:	2300      	movs	r3, #0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <HAL_TIM_PWM_Start+0x174>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d022      	beq.n	8002caa <HAL_TIM_PWM_Start+0x136>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6c:	d01d      	beq.n	8002caa <HAL_TIM_PWM_Start+0x136>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <HAL_TIM_PWM_Start+0x17c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d018      	beq.n	8002caa <HAL_TIM_PWM_Start+0x136>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <HAL_TIM_PWM_Start+0x180>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <HAL_TIM_PWM_Start+0x136>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <HAL_TIM_PWM_Start+0x184>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00e      	beq.n	8002caa <HAL_TIM_PWM_Start+0x136>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a16      	ldr	r2, [pc, #88]	; (8002cec <HAL_TIM_PWM_Start+0x178>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d009      	beq.n	8002caa <HAL_TIM_PWM_Start+0x136>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <HAL_TIM_PWM_Start+0x188>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d004      	beq.n	8002caa <HAL_TIM_PWM_Start+0x136>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <HAL_TIM_PWM_Start+0x18c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d111      	bne.n	8002cce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b06      	cmp	r3, #6
 8002cba:	d010      	beq.n	8002cde <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ccc:	e007      	b.n	8002cde <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	40010400 	.word	0x40010400
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40000c00 	.word	0x40000c00
 8002cfc:	40014000 	.word	0x40014000
 8002d00:	40001800 	.word	0x40001800

08002d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d122      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d11b      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0202 	mvn.w	r2, #2
 8002d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fa77 	bl	800323a <HAL_TIM_IC_CaptureCallback>
 8002d4c:	e005      	b.n	8002d5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fa69 	bl	8003226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fa7a 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d122      	bne.n	8002db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d11b      	bne.n	8002db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0204 	mvn.w	r2, #4
 8002d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa4d 	bl	800323a <HAL_TIM_IC_CaptureCallback>
 8002da0:	e005      	b.n	8002dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa3f 	bl	8003226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fa50 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d122      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d11b      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0208 	mvn.w	r2, #8
 8002dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa23 	bl	800323a <HAL_TIM_IC_CaptureCallback>
 8002df4:	e005      	b.n	8002e02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa15 	bl	8003226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fa26 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d122      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	d11b      	bne.n	8002e5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0210 	mvn.w	r2, #16
 8002e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2208      	movs	r2, #8
 8002e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f9f9 	bl	800323a <HAL_TIM_IC_CaptureCallback>
 8002e48:	e005      	b.n	8002e56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f9eb 	bl	8003226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f9fc 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d10e      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d107      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0201 	mvn.w	r2, #1
 8002e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f001 f9a0 	bl	80041c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b80      	cmp	r3, #128	; 0x80
 8002e94:	d10e      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea0:	2b80      	cmp	r3, #128	; 0x80
 8002ea2:	d107      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fd78 	bl	80039a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d107      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f9c1 	bl	8003262 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d10e      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d107      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0220 	mvn.w	r2, #32
 8002f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fd42 	bl	8003990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e0ae      	b.n	8003090 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	f200 809f 	bhi.w	8003080 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f42:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002f7d 	.word	0x08002f7d
 8002f4c:	08003081 	.word	0x08003081
 8002f50:	08003081 	.word	0x08003081
 8002f54:	08003081 	.word	0x08003081
 8002f58:	08002fbd 	.word	0x08002fbd
 8002f5c:	08003081 	.word	0x08003081
 8002f60:	08003081 	.word	0x08003081
 8002f64:	08003081 	.word	0x08003081
 8002f68:	08002fff 	.word	0x08002fff
 8002f6c:	08003081 	.word	0x08003081
 8002f70:	08003081 	.word	0x08003081
 8002f74:	08003081 	.word	0x08003081
 8002f78:	0800303f 	.word	0x0800303f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fa18 	bl	80033b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0208 	orr.w	r2, r2, #8
 8002f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0204 	bic.w	r2, r2, #4
 8002fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6999      	ldr	r1, [r3, #24]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	619a      	str	r2, [r3, #24]
      break;
 8002fba:	e064      	b.n	8003086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fa68 	bl	8003498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6999      	ldr	r1, [r3, #24]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	021a      	lsls	r2, r3, #8
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	619a      	str	r2, [r3, #24]
      break;
 8002ffc:	e043      	b.n	8003086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fabd 	bl	8003584 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0208 	orr.w	r2, r2, #8
 8003018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0204 	bic.w	r2, r2, #4
 8003028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69d9      	ldr	r1, [r3, #28]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	61da      	str	r2, [r3, #28]
      break;
 800303c:	e023      	b.n	8003086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fb11 	bl	800366c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69d9      	ldr	r1, [r3, #28]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	021a      	lsls	r2, r3, #8
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	61da      	str	r2, [r3, #28]
      break;
 800307e:	e002      	b.n	8003086 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	75fb      	strb	r3, [r7, #23]
      break;
 8003084:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800308e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_TIM_ConfigClockSource+0x1c>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e0b4      	b.n	800321e <HAL_TIM_ConfigClockSource+0x186>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ec:	d03e      	beq.n	800316c <HAL_TIM_ConfigClockSource+0xd4>
 80030ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f2:	f200 8087 	bhi.w	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fa:	f000 8086 	beq.w	800320a <HAL_TIM_ConfigClockSource+0x172>
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	d87f      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b70      	cmp	r3, #112	; 0x70
 8003106:	d01a      	beq.n	800313e <HAL_TIM_ConfigClockSource+0xa6>
 8003108:	2b70      	cmp	r3, #112	; 0x70
 800310a:	d87b      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b60      	cmp	r3, #96	; 0x60
 800310e:	d050      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003110:	2b60      	cmp	r3, #96	; 0x60
 8003112:	d877      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b50      	cmp	r3, #80	; 0x50
 8003116:	d03c      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0xfa>
 8003118:	2b50      	cmp	r3, #80	; 0x50
 800311a:	d873      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d058      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d86f      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b30      	cmp	r3, #48	; 0x30
 8003126:	d064      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003128:	2b30      	cmp	r3, #48	; 0x30
 800312a:	d86b      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b20      	cmp	r3, #32
 800312e:	d060      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003130:	2b20      	cmp	r3, #32
 8003132:	d867      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d05c      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003138:	2b10      	cmp	r3, #16
 800313a:	d05a      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x15a>
 800313c:	e062      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6899      	ldr	r1, [r3, #8]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f000 fb5d 	bl	800380c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	609a      	str	r2, [r3, #8]
      break;
 800316a:	e04f      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	6899      	ldr	r1, [r3, #8]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f000 fb46 	bl	800380c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800318e:	609a      	str	r2, [r3, #8]
      break;
 8003190:	e03c      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 faba 	bl	8003718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2150      	movs	r1, #80	; 0x50
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fb13 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 80031b0:	e02c      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	461a      	mov	r2, r3
 80031c0:	f000 fad9 	bl	8003776 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2160      	movs	r1, #96	; 0x60
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fb03 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 80031d0:	e01c      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	461a      	mov	r2, r3
 80031e0:	f000 fa9a 	bl	8003718 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2140      	movs	r1, #64	; 0x40
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 faf3 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 80031f0:	e00c      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f000 faea 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 8003202:	e003      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
      break;
 8003208:	e000      	b.n	800320c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800320a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800321c:	7bfb      	ldrb	r3, [r7, #15]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a40      	ldr	r2, [pc, #256]	; (800338c <TIM_Base_SetConfig+0x114>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003296:	d00f      	beq.n	80032b8 <TIM_Base_SetConfig+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <TIM_Base_SetConfig+0x118>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00b      	beq.n	80032b8 <TIM_Base_SetConfig+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <TIM_Base_SetConfig+0x11c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d007      	beq.n	80032b8 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3b      	ldr	r2, [pc, #236]	; (8003398 <TIM_Base_SetConfig+0x120>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d003      	beq.n	80032b8 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3a      	ldr	r2, [pc, #232]	; (800339c <TIM_Base_SetConfig+0x124>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d108      	bne.n	80032ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2f      	ldr	r2, [pc, #188]	; (800338c <TIM_Base_SetConfig+0x114>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d02b      	beq.n	800332a <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d027      	beq.n	800332a <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	; (8003390 <TIM_Base_SetConfig+0x118>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d023      	beq.n	800332a <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2b      	ldr	r2, [pc, #172]	; (8003394 <TIM_Base_SetConfig+0x11c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01f      	beq.n	800332a <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2a      	ldr	r2, [pc, #168]	; (8003398 <TIM_Base_SetConfig+0x120>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d01b      	beq.n	800332a <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a29      	ldr	r2, [pc, #164]	; (800339c <TIM_Base_SetConfig+0x124>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d017      	beq.n	800332a <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a28      	ldr	r2, [pc, #160]	; (80033a0 <TIM_Base_SetConfig+0x128>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a27      	ldr	r2, [pc, #156]	; (80033a4 <TIM_Base_SetConfig+0x12c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00f      	beq.n	800332a <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a26      	ldr	r2, [pc, #152]	; (80033a8 <TIM_Base_SetConfig+0x130>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00b      	beq.n	800332a <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a25      	ldr	r2, [pc, #148]	; (80033ac <TIM_Base_SetConfig+0x134>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <TIM_Base_SetConfig+0x138>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d003      	beq.n	800332a <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a23      	ldr	r2, [pc, #140]	; (80033b4 <TIM_Base_SetConfig+0x13c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d108      	bne.n	800333c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <TIM_Base_SetConfig+0x114>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_Base_SetConfig+0xf8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a0c      	ldr	r2, [pc, #48]	; (800339c <TIM_Base_SetConfig+0x124>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d103      	bne.n	8003378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	615a      	str	r2, [r3, #20]
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40010000 	.word	0x40010000
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800
 8003398:	40000c00 	.word	0x40000c00
 800339c:	40010400 	.word	0x40010400
 80033a0:	40014000 	.word	0x40014000
 80033a4:	40014400 	.word	0x40014400
 80033a8:	40014800 	.word	0x40014800
 80033ac:	40001800 	.word	0x40001800
 80033b0:	40001c00 	.word	0x40001c00
 80033b4:	40002000 	.word	0x40002000

080033b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f023 0201 	bic.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 0302 	bic.w	r3, r3, #2
 8003400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a20      	ldr	r2, [pc, #128]	; (8003490 <TIM_OC1_SetConfig+0xd8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <TIM_OC1_SetConfig+0x64>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <TIM_OC1_SetConfig+0xdc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d10c      	bne.n	8003436 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0308 	bic.w	r3, r3, #8
 8003422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f023 0304 	bic.w	r3, r3, #4
 8003434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <TIM_OC1_SetConfig+0xd8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_OC1_SetConfig+0x8e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <TIM_OC1_SetConfig+0xdc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d111      	bne.n	800346a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800344c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	621a      	str	r2, [r3, #32]
}
 8003484:	bf00      	nop
 8003486:	371c      	adds	r7, #28
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40010000 	.word	0x40010000
 8003494:	40010400 	.word	0x40010400

08003498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f023 0210 	bic.w	r2, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f023 0320 	bic.w	r3, r3, #32
 80034e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a22      	ldr	r2, [pc, #136]	; (800357c <TIM_OC2_SetConfig+0xe4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_OC2_SetConfig+0x68>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a21      	ldr	r2, [pc, #132]	; (8003580 <TIM_OC2_SetConfig+0xe8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10d      	bne.n	800351c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a17      	ldr	r2, [pc, #92]	; (800357c <TIM_OC2_SetConfig+0xe4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_OC2_SetConfig+0x94>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a16      	ldr	r2, [pc, #88]	; (8003580 <TIM_OC2_SetConfig+0xe8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d113      	bne.n	8003554 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800353a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40010000 	.word	0x40010000
 8003580:	40010400 	.word	0x40010400

08003584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a21      	ldr	r2, [pc, #132]	; (8003664 <TIM_OC3_SetConfig+0xe0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d003      	beq.n	80035ea <TIM_OC3_SetConfig+0x66>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a20      	ldr	r2, [pc, #128]	; (8003668 <TIM_OC3_SetConfig+0xe4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10d      	bne.n	8003606 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a16      	ldr	r2, [pc, #88]	; (8003664 <TIM_OC3_SetConfig+0xe0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_OC3_SetConfig+0x92>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a15      	ldr	r2, [pc, #84]	; (8003668 <TIM_OC3_SetConfig+0xe4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d113      	bne.n	800363e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800361c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40010000 	.word	0x40010000
 8003668:	40010400 	.word	0x40010400

0800366c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	031b      	lsls	r3, r3, #12
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <TIM_OC4_SetConfig+0xa4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC4_SetConfig+0x68>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <TIM_OC4_SetConfig+0xa8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d109      	bne.n	80036e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	019b      	lsls	r3, r3, #6
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40010000 	.word	0x40010000
 8003714:	40010400 	.word	0x40010400

08003718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f023 0201 	bic.w	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f023 030a 	bic.w	r3, r3, #10
 8003754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003776:	b480      	push	{r7}
 8003778:	b087      	sub	sp, #28
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f023 0210 	bic.w	r2, r3, #16
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	031b      	lsls	r3, r3, #12
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f043 0307 	orr.w	r3, r3, #7
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	021a      	lsls	r2, r3, #8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	431a      	orrs	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4313      	orrs	r3, r2
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2201      	movs	r2, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1a      	ldr	r2, [r3, #32]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	43db      	mvns	r3, r3
 800386e:	401a      	ands	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a1a      	ldr	r2, [r3, #32]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	431a      	orrs	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e05a      	b.n	8003966 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a21      	ldr	r2, [pc, #132]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d022      	beq.n	800393a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d01d      	beq.n	800393a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d018      	beq.n	800393a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1b      	ldr	r2, [pc, #108]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1a      	ldr	r2, [pc, #104]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a18      	ldr	r2, [pc, #96]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a17      	ldr	r2, [pc, #92]	; (8003988 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a15      	ldr	r2, [pc, #84]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d10c      	bne.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	4313      	orrs	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	40000c00 	.word	0x40000c00
 8003984:	40010400 	.word	0x40010400
 8003988:	40014000 	.word	0x40014000
 800398c:	40001800 	.word	0x40001800

08003990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80039be:	463b      	mov	r3, r7
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80039ca:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <MX_ADC1_Init+0xec>)
 80039cc:	4a36      	ldr	r2, [pc, #216]	; (8003aa8 <MX_ADC1_Init+0xf0>)
 80039ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80039d0:	4b34      	ldr	r3, [pc, #208]	; (8003aa4 <MX_ADC1_Init+0xec>)
 80039d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039d8:	4b32      	ldr	r3, [pc, #200]	; (8003aa4 <MX_ADC1_Init+0xec>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <MX_ADC1_Init+0xec>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80039e4:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <MX_ADC1_Init+0xec>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039ea:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <MX_ADC1_Init+0xec>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <MX_ADC1_Init+0xec>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039f8:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <MX_ADC1_Init+0xec>)
 80039fa:	4a2c      	ldr	r2, [pc, #176]	; (8003aac <MX_ADC1_Init+0xf4>)
 80039fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <MX_ADC1_Init+0xec>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8003a04:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <MX_ADC1_Init+0xec>)
 8003a06:	2204      	movs	r2, #4
 8003a08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003a0a:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <MX_ADC1_Init+0xec>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <MX_ADC1_Init+0xec>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a18:	4822      	ldr	r0, [pc, #136]	; (8003aa4 <MX_ADC1_Init+0xec>)
 8003a1a:	f7fc fde7 	bl	80005ec <HAL_ADC_Init>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003a24:	f000 fbf0 	bl	8004208 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003a28:	2306      	movs	r3, #6
 8003a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003a30:	2301      	movs	r3, #1
 8003a32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a34:	463b      	mov	r3, r7
 8003a36:	4619      	mov	r1, r3
 8003a38:	481a      	ldr	r0, [pc, #104]	; (8003aa4 <MX_ADC1_Init+0xec>)
 8003a3a:	f7fc ff49 	bl	80008d0 <HAL_ADC_ConfigChannel>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003a44:	f000 fbe0 	bl	8004208 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003a48:	2307      	movs	r3, #7
 8003a4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a50:	463b      	mov	r3, r7
 8003a52:	4619      	mov	r1, r3
 8003a54:	4813      	ldr	r0, [pc, #76]	; (8003aa4 <MX_ADC1_Init+0xec>)
 8003a56:	f7fc ff3b 	bl	80008d0 <HAL_ADC_ConfigChannel>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003a60:	f000 fbd2 	bl	8004208 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003a64:	2301      	movs	r3, #1
 8003a66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	4619      	mov	r1, r3
 8003a70:	480c      	ldr	r0, [pc, #48]	; (8003aa4 <MX_ADC1_Init+0xec>)
 8003a72:	f7fc ff2d 	bl	80008d0 <HAL_ADC_ConfigChannel>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003a7c:	f000 fbc4 	bl	8004208 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003a80:	2302      	movs	r3, #2
 8003a82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003a84:	2304      	movs	r3, #4
 8003a86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a88:	463b      	mov	r3, r7
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4805      	ldr	r0, [pc, #20]	; (8003aa4 <MX_ADC1_Init+0xec>)
 8003a8e:	f7fc ff1f 	bl	80008d0 <HAL_ADC_ConfigChannel>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003a98:	f000 fbb6 	bl	8004208 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	2000002c 	.word	0x2000002c
 8003aa8:	40012000 	.word	0x40012000
 8003aac:	0f000001 	.word	0x0f000001

08003ab0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab8:	f107 0314 	add.w	r3, r7, #20
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2f      	ldr	r2, [pc, #188]	; (8003b8c <HAL_ADC_MspInit+0xdc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d157      	bne.n	8003b82 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	4b2e      	ldr	r3, [pc, #184]	; (8003b90 <HAL_ADC_MspInit+0xe0>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	4a2d      	ldr	r2, [pc, #180]	; (8003b90 <HAL_ADC_MspInit+0xe0>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <HAL_ADC_MspInit+0xe0>)
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	4b27      	ldr	r3, [pc, #156]	; (8003b90 <HAL_ADC_MspInit+0xe0>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <HAL_ADC_MspInit+0xe0>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6313      	str	r3, [r2, #48]	; 0x30
 8003afe:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_ADC_MspInit+0xe0>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7;
 8003b0a:	23c6      	movs	r3, #198	; 0xc6
 8003b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b16:	f107 0314 	add.w	r3, r7, #20
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	481d      	ldr	r0, [pc, #116]	; (8003b94 <HAL_ADC_MspInit+0xe4>)
 8003b1e:	f7fe f94f 	bl	8001dc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003b22:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b24:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <HAL_ADC_MspInit+0xec>)
 8003b26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003b28:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b2e:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b34:	4b18      	ldr	r3, [pc, #96]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b3a:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b60:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b66:	480c      	ldr	r0, [pc, #48]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b68:	f7fd fdba 	bl	80016e0 <HAL_DMA_Init>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003b72:	f000 fb49 	bl	8004208 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a07      	ldr	r2, [pc, #28]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38
 8003b7c:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <HAL_ADC_MspInit+0xe8>)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003b82:	bf00      	nop
 8003b84:	3728      	adds	r7, #40	; 0x28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40012000 	.word	0x40012000
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40020000 	.word	0x40020000
 8003b98:	20000074 	.word	0x20000074
 8003b9c:	40026410 	.word	0x40026410

08003ba0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003ba4:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003ba6:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <MX_CAN1_Init+0x6c>)
 8003ba8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 60;
 8003baa:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003bac:	223c      	movs	r2, #60	; 0x3c
 8003bae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8003bb0:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bb6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003bb8:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003bc0:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8003bc4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003bc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bcc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003be0:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003be6:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003bf2:	4805      	ldr	r0, [pc, #20]	; (8003c08 <MX_CAN1_Init+0x68>)
 8003bf4:	f7fd f90c 	bl	8000e10 <HAL_CAN_Init>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8003bfe:	f000 fb03 	bl	8004208 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000260 	.word	0x20000260
 8003c0c:	40006400 	.word	0x40006400

08003c10 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	; 0x28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a22      	ldr	r2, [pc, #136]	; (8003cb8 <HAL_CAN_MspInit+0xa8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d13d      	bne.n	8003cae <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	4b21      	ldr	r3, [pc, #132]	; (8003cbc <HAL_CAN_MspInit+0xac>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	4a20      	ldr	r2, [pc, #128]	; (8003cbc <HAL_CAN_MspInit+0xac>)
 8003c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c40:	6413      	str	r3, [r2, #64]	; 0x40
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <HAL_CAN_MspInit+0xac>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_CAN_MspInit+0xac>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <HAL_CAN_MspInit+0xac>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5e:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <HAL_CAN_MspInit+0xac>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003c6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c70:	2302      	movs	r3, #2
 8003c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c74:	2302      	movs	r3, #2
 8003c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003c7c:	2309      	movs	r3, #9
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	4619      	mov	r1, r3
 8003c86:	480e      	ldr	r0, [pc, #56]	; (8003cc0 <HAL_CAN_MspInit+0xb0>)
 8003c88:	f7fe f89a 	bl	8001dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c92:	2302      	movs	r3, #2
 8003c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003c9e:	2309      	movs	r3, #9
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4805      	ldr	r0, [pc, #20]	; (8003cc0 <HAL_CAN_MspInit+0xb0>)
 8003caa:	f7fe f889 	bl	8001dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003cae:	bf00      	nop
 8003cb0:	3728      	adds	r7, #40	; 0x28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40006400 	.word	0x40006400
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40020000 	.word	0x40020000

08003cc4 <CANFilerConfig>:
/* USER CODE BEGIN 1 */

/*******************************************************************************
 FILTER CONFIGURATION
 *******************************************************************************/
void CANFilerConfig(void) {
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
	filter_0.FilterBank = 0;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <CANFilerConfig+0x4c>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	615a      	str	r2, [r3, #20]
	filter_0.FilterMode = CAN_FILTERMODE_IDMASK;
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <CANFilerConfig+0x4c>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	619a      	str	r2, [r3, #24]
	filter_0.FilterScale = CAN_FILTERSCALE_32BIT;
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <CANFilerConfig+0x4c>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	61da      	str	r2, [r3, #28]
	filter_0.FilterIdHigh = 0x0000;			//0x321 << 5;
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <CANFilerConfig+0x4c>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
	filter_0.FilterIdLow = 0x0000;				//0x00000000;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <CANFilerConfig+0x4c>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
	filter_0.FilterMaskIdHigh = 0x0000;		//0x111 << 5;
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <CANFilerConfig+0x4c>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	609a      	str	r2, [r3, #8]
	filter_0.FilterMaskIdLow = 0x0000;			//0x00000000;
 8003cec:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <CANFilerConfig+0x4c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	60da      	str	r2, [r3, #12]
	filter_0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <CANFilerConfig+0x4c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	611a      	str	r2, [r3, #16]
	filter_0.FilterActivation = ENABLE;
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <CANFilerConfig+0x4c>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	621a      	str	r2, [r3, #32]
	filter_0.SlaveStartFilterBank = 14;
 8003cfe:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <CANFilerConfig+0x4c>)
 8003d00:	220e      	movs	r2, #14
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	2000022c 	.word	0x2000022c

08003d14 <CAN1_Init>:

/*******************************************************************************
 	 PERYFERIUM INITIAZLIZATION
 *******************************************************************************/
void CAN1_Init() {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
	if (HAL_CAN_ConfigFilter(&hcan1, &filter_0) != HAL_OK) {
 8003d18:	490d      	ldr	r1, [pc, #52]	; (8003d50 <CAN1_Init+0x3c>)
 8003d1a:	480e      	ldr	r0, [pc, #56]	; (8003d54 <CAN1_Init+0x40>)
 8003d1c:	f7fd f974 	bl	8001008 <HAL_CAN_ConfigFilter>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <CAN1_Init+0x16>
		Error_Handler();
 8003d26:	f000 fa6f 	bl	8004208 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8003d2a:	480a      	ldr	r0, [pc, #40]	; (8003d54 <CAN1_Init+0x40>)
 8003d2c:	f7fd fa4c 	bl	80011c8 <HAL_CAN_Start>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <CAN1_Init+0x26>
		Error_Handler();
 8003d36:	f000 fa67 	bl	8004208 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1,
 8003d3a:	2103      	movs	r1, #3
 8003d3c:	4805      	ldr	r0, [pc, #20]	; (8003d54 <CAN1_Init+0x40>)
 8003d3e:	f7fd fb97 	bl	8001470 <HAL_CAN_ActivateNotification>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <CAN1_Init+0x38>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8003d48:	f000 fa5e 	bl	8004208 <Error_Handler>
	}
}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	2000022c 	.word	0x2000022c
 8003d54:	20000260 	.word	0x20000260

08003d58 <prepareFrameData>:

/*******************************************************************************
 FRAME CONFIGURATION
 *******************************************************************************/
void prepareFrameData(void){
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
	uint32_t inputVoltage = averageArrayVoltage;
 8003d5e:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <prepareFrameData+0x6c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	607b      	str	r3, [r7, #4]
	uint32_t inputCurrent = averageArrayCurrent;
 8003d64:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <prepareFrameData+0x70>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	603b      	str	r3, [r7, #0]

	frame_SYNC.TxData[0] = 0xFF & inputVoltage;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <prepareFrameData+0x74>)
 8003d70:	701a      	strb	r2, [r3, #0]
	frame_SYNC.TxData[1] = (0xFF00 & inputVoltage) >> 8;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <prepareFrameData+0x74>)
 8003d7a:	705a      	strb	r2, [r3, #1]
	frame_SYNC.TxData[2] = (0xFF0000 & inputVoltage) >> 16;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <prepareFrameData+0x74>)
 8003d84:	709a      	strb	r2, [r3, #2]
	frame_SYNC.TxData[3] = (0xFF000000 & inputVoltage) >> 24;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	0e1b      	lsrs	r3, r3, #24
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <prepareFrameData+0x74>)
 8003d8e:	70da      	strb	r2, [r3, #3]
	frame_SYNC.TxData[4] = 0xFF & inputCurrent;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <prepareFrameData+0x74>)
 8003d96:	711a      	strb	r2, [r3, #4]
	frame_SYNC.TxData[5] = (0xFF00 & inputCurrent) >> 8;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <prepareFrameData+0x74>)
 8003da0:	715a      	strb	r2, [r3, #5]
	frame_SYNC.TxData[6] = (0xFF0000 & inputCurrent) >> 16;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <prepareFrameData+0x74>)
 8003daa:	719a      	strb	r2, [r3, #6]
	frame_SYNC.TxData[7] = (0xFF000000 & inputCurrent) >> 24;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	0e1b      	lsrs	r3, r3, #24
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <prepareFrameData+0x74>)
 8003db4:	71da      	strb	r2, [r3, #7]
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	200001b0 	.word	0x200001b0
 8003dc8:	200002a8 	.word	0x200002a8
 8003dcc:	200001bc 	.word	0x200001bc

08003dd0 <sendCAN>:

void sendCAN() {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
	frame_SYNC.TxHeader.StdId = 0x080;
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <sendCAN+0x58>)
 8003dd6:	2280      	movs	r2, #128	; 0x80
 8003dd8:	609a      	str	r2, [r3, #8]
	frame_SYNC.TxHeader.RTR = CAN_RTR_DATA;
 8003dda:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <sendCAN+0x58>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	615a      	str	r2, [r3, #20]
	frame_SYNC.TxHeader.IDE = CAN_ID_STD;
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <sendCAN+0x58>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	611a      	str	r2, [r3, #16]
	frame_SYNC.TxHeader.DLC = 8;
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <sendCAN+0x58>)
 8003de8:	2208      	movs	r2, #8
 8003dea:	619a      	str	r2, [r3, #24]
	frame_SYNC.TxHeader.TransmitGlobalTime = DISABLE;
 8003dec:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <sendCAN+0x58>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	771a      	strb	r2, [r3, #28]

	prepareFrameData();
 8003df2:	f7ff ffb1 	bl	8003d58 <prepareFrameData>

	if (HAL_CAN_AddTxMessage(&hcan1, &frame_SYNC.TxHeader, frame_SYNC.TxData,
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <sendCAN+0x5c>)
 8003df8:	4a0b      	ldr	r2, [pc, #44]	; (8003e28 <sendCAN+0x58>)
 8003dfa:	490d      	ldr	r1, [pc, #52]	; (8003e30 <sendCAN+0x60>)
 8003dfc:	480d      	ldr	r0, [pc, #52]	; (8003e34 <sendCAN+0x64>)
 8003dfe:	f7fd fa27 	bl	8001250 <HAL_CAN_AddTxMessage>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <sendCAN+0x3e>
			&TxMailbox) != HAL_OK) {
		Error_Handler();
 8003e08:	f000 f9fe 	bl	8004208 <Error_Handler>
 8003e0c:	e001      	b.n	8003e12 <sendCAN+0x42>
	} else{
		resetYellowState();
 8003e0e:	f000 fc97 	bl	8004740 <resetYellowState>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {
 8003e12:	bf00      	nop
 8003e14:	4807      	ldr	r0, [pc, #28]	; (8003e34 <sendCAN+0x64>)
 8003e16:	f7fd faf6 	bl	8001406 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d1f9      	bne.n	8003e14 <sendCAN+0x44>
	}
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200001bc 	.word	0x200001bc
 8003e2c:	20000224 	.word	0x20000224
 8003e30:	200001c4 	.word	0x200001c4
 8003e34:	20000260 	.word	0x20000260

08003e38 <sendCANData>:

void sendCANData(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5, uint8_t byte6, uint8_t byte7) {
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4604      	mov	r4, r0
 8003e40:	4608      	mov	r0, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	461a      	mov	r2, r3
 8003e46:	4623      	mov	r3, r4
 8003e48:	71fb      	strb	r3, [r7, #7]
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71bb      	strb	r3, [r7, #6]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	717b      	strb	r3, [r7, #5]
 8003e52:	4613      	mov	r3, r2
 8003e54:	713b      	strb	r3, [r7, #4]
	frame_SYNC.TxHeader.StdId = 0x080;
 8003e56:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <sendCANData+0xa0>)
 8003e58:	2280      	movs	r2, #128	; 0x80
 8003e5a:	609a      	str	r2, [r3, #8]
	frame_SYNC.TxHeader.RTR = CAN_RTR_DATA;
 8003e5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <sendCANData+0xa0>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	615a      	str	r2, [r3, #20]
	frame_SYNC.TxHeader.IDE = CAN_ID_STD;
 8003e62:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <sendCANData+0xa0>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	611a      	str	r2, [r3, #16]
	frame_SYNC.TxHeader.DLC = 8;
 8003e68:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <sendCANData+0xa0>)
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	619a      	str	r2, [r3, #24]
	frame_SYNC.TxHeader.TransmitGlobalTime = DISABLE;
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <sendCANData+0xa0>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	771a      	strb	r2, [r3, #28]

	frame_SYNC.TxData[0] = byte0;
 8003e74:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <sendCANData+0xa0>)
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	7013      	strb	r3, [r2, #0]
	frame_SYNC.TxData[1] = byte1;
 8003e7a:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <sendCANData+0xa0>)
 8003e7c:	79bb      	ldrb	r3, [r7, #6]
 8003e7e:	7053      	strb	r3, [r2, #1]
	frame_SYNC.TxData[2] = byte2;
 8003e80:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <sendCANData+0xa0>)
 8003e82:	797b      	ldrb	r3, [r7, #5]
 8003e84:	7093      	strb	r3, [r2, #2]
	frame_SYNC.TxData[3] = byte3;
 8003e86:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <sendCANData+0xa0>)
 8003e88:	793b      	ldrb	r3, [r7, #4]
 8003e8a:	70d3      	strb	r3, [r2, #3]
	frame_SYNC.TxData[4] = byte4;
 8003e8c:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <sendCANData+0xa0>)
 8003e8e:	7e3b      	ldrb	r3, [r7, #24]
 8003e90:	7113      	strb	r3, [r2, #4]
	frame_SYNC.TxData[5] = byte5;
 8003e92:	4a11      	ldr	r2, [pc, #68]	; (8003ed8 <sendCANData+0xa0>)
 8003e94:	7f3b      	ldrb	r3, [r7, #28]
 8003e96:	7153      	strb	r3, [r2, #5]
	frame_SYNC.TxData[6] = byte6;
 8003e98:	4a0f      	ldr	r2, [pc, #60]	; (8003ed8 <sendCANData+0xa0>)
 8003e9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e9e:	7193      	strb	r3, [r2, #6]
	frame_SYNC.TxData[7] = byte7;
 8003ea0:	4a0d      	ldr	r2, [pc, #52]	; (8003ed8 <sendCANData+0xa0>)
 8003ea2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ea6:	71d3      	strb	r3, [r2, #7]

	if (HAL_CAN_AddTxMessage(&hcan1, &frame_SYNC.TxHeader, frame_SYNC.TxData,
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <sendCANData+0xa4>)
 8003eaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ed8 <sendCANData+0xa0>)
 8003eac:	490c      	ldr	r1, [pc, #48]	; (8003ee0 <sendCANData+0xa8>)
 8003eae:	480d      	ldr	r0, [pc, #52]	; (8003ee4 <sendCANData+0xac>)
 8003eb0:	f7fd f9ce 	bl	8001250 <HAL_CAN_AddTxMessage>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <sendCANData+0x86>
			&TxMailbox) != HAL_OK) {
		Error_Handler();
 8003eba:	f000 f9a5 	bl	8004208 <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 1) {
 8003ebe:	bf00      	nop
 8003ec0:	4808      	ldr	r0, [pc, #32]	; (8003ee4 <sendCANData+0xac>)
 8003ec2:	f7fd faa0 	bl	8001406 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d1f9      	bne.n	8003ec0 <sendCANData+0x88>
	}
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd90      	pop	{r4, r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200001bc 	.word	0x200001bc
 8003edc:	20000224 	.word	0x20000224
 8003ee0:	200001c4 	.word	0x200001c4
 8003ee4:	20000260 	.word	0x20000260

08003ee8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <MX_DMA_Init+0x3c>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <MX_DMA_Init+0x3c>)
 8003ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
 8003efe:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <MX_DMA_Init+0x3c>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	2038      	movs	r0, #56	; 0x38
 8003f10:	f7fd fbaf 	bl	8001672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003f14:	2038      	movs	r0, #56	; 0x38
 8003f16:	f7fd fbc8 	bl	80016aa <HAL_NVIC_EnableIRQ>

}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800

08003f28 <startReadingDMA>:

/* USER CODE BEGIN 2 */
void startReadingDMA(uint32_t * valueContainer){
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, valueContainer, 4);
 8003f30:	2204      	movs	r2, #4
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4803      	ldr	r0, [pc, #12]	; (8003f44 <startReadingDMA+0x1c>)
 8003f36:	f7fc fb9d 	bl	8000674 <HAL_ADC_Start_DMA>
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	2000002c 	.word	0x2000002c

08003f48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	; 0x28
 8003f4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4e:	f107 0314 	add.w	r3, r7, #20
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	60da      	str	r2, [r3, #12]
 8003f5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	4b37      	ldr	r3, [pc, #220]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	4a36      	ldr	r2, [pc, #216]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003f68:	f043 0310 	orr.w	r3, r3, #16
 8003f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6e:	4b34      	ldr	r3, [pc, #208]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	4b30      	ldr	r3, [pc, #192]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a2f      	ldr	r2, [pc, #188]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003f84:	f043 0304 	orr.w	r3, r3, #4
 8003f88:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8a:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	4b29      	ldr	r3, [pc, #164]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	4a28      	ldr	r2, [pc, #160]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa6:	4b26      	ldr	r3, [pc, #152]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	4a21      	ldr	r2, [pc, #132]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	607b      	str	r3, [r7, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	4a1a      	ldr	r2, [pc, #104]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fde:	4b18      	ldr	r3, [pc, #96]	; (8004040 <MX_GPIO_Init+0xf8>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003fea:	2200      	movs	r2, #0
 8003fec:	2170      	movs	r1, #112	; 0x70
 8003fee:	4815      	ldr	r0, [pc, #84]	; (8004044 <MX_GPIO_Init+0xfc>)
 8003ff0:	f7fe f882 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4813      	ldr	r0, [pc, #76]	; (8004048 <MX_GPIO_Init+0x100>)
 8003ffa:	f7fe f87d 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003ffe:	2370      	movs	r3, #112	; 0x70
 8004000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004002:	2301      	movs	r3, #1
 8004004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400a:	2300      	movs	r3, #0
 800400c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800400e:	f107 0314 	add.w	r3, r7, #20
 8004012:	4619      	mov	r1, r3
 8004014:	480b      	ldr	r0, [pc, #44]	; (8004044 <MX_GPIO_Init+0xfc>)
 8004016:	f7fd fed3 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800401a:	2301      	movs	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800401e:	2301      	movs	r3, #1
 8004020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004026:	2300      	movs	r3, #0
 8004028:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800402a:	f107 0314 	add.w	r3, r7, #20
 800402e:	4619      	mov	r1, r3
 8004030:	4805      	ldr	r0, [pc, #20]	; (8004048 <MX_GPIO_Init+0x100>)
 8004032:	f7fd fec5 	bl	8001dc0 <HAL_GPIO_Init>

}
 8004036:	bf00      	nop
 8004038:	3728      	adds	r7, #40	; 0x28
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40023800 	.word	0x40023800
 8004044:	40021000 	.word	0x40021000
 8004048:	40020400 	.word	0x40020400

0800404c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	isMPPTInitialised = 0;
 8004052:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <main+0x94>)
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004058:	f7fc fa32 	bl	80004c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800405c:	f000 f84a 	bl	80040f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004060:	f7ff ff72 	bl	8003f48 <MX_GPIO_Init>
  MX_DMA_Init();
 8004064:	f7ff ff40 	bl	8003ee8 <MX_DMA_Init>
  MX_TIM3_Init();
 8004068:	f000 f9fc 	bl	8004464 <MX_TIM3_Init>
  MX_ADC1_Init();
 800406c:	f7ff fca4 	bl	80039b8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8004070:	f7ff fd96 	bl	8003ba0 <MX_CAN1_Init>
  MX_TIM2_Init();
 8004074:	f000 f9aa 	bl	80043cc <MX_TIM2_Init>
  MX_TIM1_Init();
 8004078:	f000 f956 	bl	8004328 <MX_TIM1_Init>
  MX_TIM4_Init();
 800407c:	f000 fa4c 	bl	8004518 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  CANFilerConfig();
 8004080:	f7ff fe20 	bl	8003cc4 <CANFilerConfig>
  CAN1_Init();
 8004084:	f7ff fe46 	bl	8003d14 <CAN1_Init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); 			//MCU_PWM
 8004088:	210c      	movs	r1, #12
 800408a:	4816      	ldr	r0, [pc, #88]	; (80040e4 <main+0x98>)
 800408c:	f7fe fd72 	bl	8002b74 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);	//MCU_PWM_EN Register
 8004090:	2201      	movs	r2, #1
 8004092:	2101      	movs	r1, #1
 8004094:	4814      	ldr	r0, [pc, #80]	; (80040e8 <main+0x9c>)
 8004096:	f7fe f82f 	bl	80020f8 <HAL_GPIO_WritePin>


  HAL_TIM_Base_Start_IT(&htim4);
 800409a:	4814      	ldr	r0, [pc, #80]	; (80040ec <main+0xa0>)
 800409c:	f7fe fcaa 	bl	80029f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80040a0:	4813      	ldr	r0, [pc, #76]	; (80040f0 <main+0xa4>)
 80040a2:	f7fe fca7 	bl	80029f4 <HAL_TIM_Base_Start_IT>

  MPPTInit();
 80040a6:	f000 fd99 	bl	8004bdc <MPPTInit>

  enablePWM();
 80040aa:	f000 fb91 	bl	80047d0 <enablePWM>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  storeMeasurements();
 80040ae:	f000 fc51 	bl	8004954 <storeMeasurements>
	  HAL_Delay(DELAY_BETWEEN_MEASUREMENTS);
 80040b2:	200a      	movs	r0, #10
 80040b4:	f7fc fa76 	bl	80005a4 <HAL_Delay>
	  sendCANData(0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8);
 80040b8:	2308      	movs	r3, #8
 80040ba:	9303      	str	r3, [sp, #12]
 80040bc:	2307      	movs	r3, #7
 80040be:	9302      	str	r3, [sp, #8]
 80040c0:	2306      	movs	r3, #6
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	2305      	movs	r3, #5
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	2304      	movs	r3, #4
 80040ca:	2203      	movs	r2, #3
 80040cc:	2102      	movs	r1, #2
 80040ce:	2001      	movs	r0, #1
 80040d0:	f7ff feb2 	bl	8003e38 <sendCANData>
	  HAL_Delay(1000);
 80040d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040d8:	f7fc fa64 	bl	80005a4 <HAL_Delay>
	  storeMeasurements();
 80040dc:	e7e7      	b.n	80040ae <main+0x62>
 80040de:	bf00      	nop
 80040e0:	2000015c 	.word	0x2000015c
 80040e4:	200002f4 	.word	0x200002f4
 80040e8:	40020400 	.word	0x40020400
 80040ec:	200002ac 	.word	0x200002ac
 80040f0:	2000033c 	.word	0x2000033c

080040f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b094      	sub	sp, #80	; 0x50
 80040f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040fa:	f107 0320 	add.w	r3, r7, #32
 80040fe:	2230      	movs	r2, #48	; 0x30
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fdea 	bl	8004cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004108:	f107 030c 	add.w	r3, r7, #12
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	60da      	str	r2, [r3, #12]
 8004116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004118:	2300      	movs	r3, #0
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <SystemClock_Config+0xcc>)
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	4a27      	ldr	r2, [pc, #156]	; (80041c0 <SystemClock_Config+0xcc>)
 8004122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004126:	6413      	str	r3, [r2, #64]	; 0x40
 8004128:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <SystemClock_Config+0xcc>)
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004134:	2300      	movs	r3, #0
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <SystemClock_Config+0xd0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a21      	ldr	r2, [pc, #132]	; (80041c4 <SystemClock_Config+0xd0>)
 800413e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <SystemClock_Config+0xd0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004150:	2302      	movs	r3, #2
 8004152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004154:	2301      	movs	r3, #1
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004158:	2310      	movs	r3, #16
 800415a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800415c:	2302      	movs	r3, #2
 800415e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004160:	2300      	movs	r3, #0
 8004162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004164:	2308      	movs	r3, #8
 8004166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004168:	23a8      	movs	r3, #168	; 0xa8
 800416a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800416c:	2302      	movs	r3, #2
 800416e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004170:	2304      	movs	r3, #4
 8004172:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004174:	f107 0320 	add.w	r3, r7, #32
 8004178:	4618      	mov	r0, r3
 800417a:	f7fd ffd7 	bl	800212c <HAL_RCC_OscConfig>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004184:	f000 f840 	bl	8004208 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004188:	230f      	movs	r3, #15
 800418a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800418c:	2302      	movs	r3, #2
 800418e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004194:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004198:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800419a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800419e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80041a0:	f107 030c 	add.w	r3, r7, #12
 80041a4:	2105      	movs	r1, #5
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe fa38 	bl	800261c <HAL_RCC_ClockConfig>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80041b2:	f000 f829 	bl	8004208 <Error_Handler>
  }
}
 80041b6:	bf00      	nop
 80041b8:	3750      	adds	r7, #80	; 0x50
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40007000 	.word	0x40007000

080041c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	if(isMPPTInitialised)
 80041d0:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00d      	beq.n	80041f4 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(htim->Instance == TIM1) // T = 1 s*/
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a08      	ldr	r2, [pc, #32]	; (8004200 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		{
			sendCAN();
 80041e2:	f7ff fdf5 	bl	8003dd0 <sendCAN>
		}

		if(htim->Instance == TIM4) // T = 500ms
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a06      	ldr	r2, [pc, #24]	; (8004204 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d101      	bne.n	80041f4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			checkArrayConnection();
 80041f0:	f000 fc92 	bl	8004b18 <checkArrayConnection>
			{
				void PandOAlgorithm();
			}
		}
	}
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	2000015c 	.word	0x2000015c
 8004200:	40010000 	.word	0x40010000
 8004204:	40000800 	.word	0x40000800

08004208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	setYellowState();
 800420c:	f000 fa88 	bl	8004720 <setYellowState>
  /* USER CODE END Error_Handler_Debug */
}
 8004210:	bf00      	nop
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	607b      	str	r3, [r7, #4]
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_MspInit+0x4c>)
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	4a0f      	ldr	r2, [pc, #60]	; (8004260 <HAL_MspInit+0x4c>)
 8004224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004228:	6453      	str	r3, [r2, #68]	; 0x44
 800422a:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <HAL_MspInit+0x4c>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004232:	607b      	str	r3, [r7, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	4b09      	ldr	r3, [pc, #36]	; (8004260 <HAL_MspInit+0x4c>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	4a08      	ldr	r2, [pc, #32]	; (8004260 <HAL_MspInit+0x4c>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004244:	6413      	str	r3, [r2, #64]	; 0x40
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_MspInit+0x4c>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800

08004264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004276:	e7fe      	b.n	8004276 <HardFault_Handler+0x4>

08004278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800427c:	e7fe      	b.n	800427c <MemManage_Handler+0x4>

0800427e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800427e:	b480      	push	{r7}
 8004280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004282:	e7fe      	b.n	8004282 <BusFault_Handler+0x4>

08004284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004288:	e7fe      	b.n	8004288 <UsageFault_Handler+0x4>

0800428a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800428e:	bf00      	nop
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b8:	f7fc f954 	bl	8000564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}

080042c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042c4:	4802      	ldr	r0, [pc, #8]	; (80042d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80042c6:	f7fe fd1d 	bl	8002d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	2000033c 	.word	0x2000033c

080042d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80042d8:	4802      	ldr	r0, [pc, #8]	; (80042e4 <TIM4_IRQHandler+0x10>)
 80042da:	f7fe fd13 	bl	8002d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	200002ac 	.word	0x200002ac

080042e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042ec:	4802      	ldr	r0, [pc, #8]	; (80042f8 <DMA2_Stream0_IRQHandler+0x10>)
 80042ee:	f7fd fafd 	bl	80018ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000074 	.word	0x20000074

080042fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004300:	4b08      	ldr	r3, [pc, #32]	; (8004324 <SystemInit+0x28>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	4a07      	ldr	r2, [pc, #28]	; (8004324 <SystemInit+0x28>)
 8004308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800430c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004310:	4b04      	ldr	r3, [pc, #16]	; (8004324 <SystemInit+0x28>)
 8004312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004316:	609a      	str	r2, [r3, #8]
#endif
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800432e:	f107 0308 	add.w	r3, r7, #8
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	609a      	str	r2, [r3, #8]
 800433a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800433c:	463b      	mov	r3, r7
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004344:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <MX_TIM1_Init+0x9c>)
 8004346:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <MX_TIM1_Init+0xa0>)
 8004348:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800;
 800434a:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <MX_TIM1_Init+0x9c>)
 800434c:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8004350:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <MX_TIM1_Init+0x9c>)
 8004354:	2200      	movs	r2, #0
 8004356:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8004358:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <MX_TIM1_Init+0x9c>)
 800435a:	f242 7210 	movw	r2, #10000	; 0x2710
 800435e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004360:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <MX_TIM1_Init+0x9c>)
 8004362:	2200      	movs	r2, #0
 8004364:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004366:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <MX_TIM1_Init+0x9c>)
 8004368:	2200      	movs	r2, #0
 800436a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800436c:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <MX_TIM1_Init+0x9c>)
 800436e:	2200      	movs	r2, #0
 8004370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004372:	4814      	ldr	r0, [pc, #80]	; (80043c4 <MX_TIM1_Init+0x9c>)
 8004374:	f7fe faee 	bl	8002954 <HAL_TIM_Base_Init>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800437e:	f7ff ff43 	bl	8004208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004386:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004388:	f107 0308 	add.w	r3, r7, #8
 800438c:	4619      	mov	r1, r3
 800438e:	480d      	ldr	r0, [pc, #52]	; (80043c4 <MX_TIM1_Init+0x9c>)
 8004390:	f7fe fe82 	bl	8003098 <HAL_TIM_ConfigClockSource>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800439a:	f7ff ff35 	bl	8004208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043a6:	463b      	mov	r3, r7
 80043a8:	4619      	mov	r1, r3
 80043aa:	4806      	ldr	r0, [pc, #24]	; (80043c4 <MX_TIM1_Init+0x9c>)
 80043ac:	f7ff fa74 	bl	8003898 <HAL_TIMEx_MasterConfigSynchronization>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80043b6:	f7ff ff27 	bl	8004208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80043ba:	bf00      	nop
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	2000033c 	.word	0x2000033c
 80043c8:	40010000 	.word	0x40010000

080043cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043d2:	f107 0308 	add.w	r3, r7, #8
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043e0:	463b      	mov	r3, r7
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <MX_TIM2_Init+0x94>)
 80043ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 80043f0:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <MX_TIM2_Init+0x94>)
 80043f2:	2254      	movs	r2, #84	; 0x54
 80043f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043f6:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <MX_TIM2_Init+0x94>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80043fc:	4b18      	ldr	r3, [pc, #96]	; (8004460 <MX_TIM2_Init+0x94>)
 80043fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004402:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004404:	4b16      	ldr	r3, [pc, #88]	; (8004460 <MX_TIM2_Init+0x94>)
 8004406:	2200      	movs	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <MX_TIM2_Init+0x94>)
 800440c:	2200      	movs	r2, #0
 800440e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004410:	4813      	ldr	r0, [pc, #76]	; (8004460 <MX_TIM2_Init+0x94>)
 8004412:	f7fe fa9f 	bl	8002954 <HAL_TIM_Base_Init>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800441c:	f7ff fef4 	bl	8004208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004424:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004426:	f107 0308 	add.w	r3, r7, #8
 800442a:	4619      	mov	r1, r3
 800442c:	480c      	ldr	r0, [pc, #48]	; (8004460 <MX_TIM2_Init+0x94>)
 800442e:	f7fe fe33 	bl	8003098 <HAL_TIM_ConfigClockSource>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004438:	f7ff fee6 	bl	8004208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800443c:	2300      	movs	r3, #0
 800443e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004440:	2300      	movs	r3, #0
 8004442:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004444:	463b      	mov	r3, r7
 8004446:	4619      	mov	r1, r3
 8004448:	4805      	ldr	r0, [pc, #20]	; (8004460 <MX_TIM2_Init+0x94>)
 800444a:	f7ff fa25 	bl	8003898 <HAL_TIMEx_MasterConfigSynchronization>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004454:	f7ff fed8 	bl	8004208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004458:	bf00      	nop
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000384 	.word	0x20000384

08004464 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800446a:	f107 0320 	add.w	r3, r7, #32
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004474:	1d3b      	adds	r3, r7, #4
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	605a      	str	r2, [r3, #4]
 800447c:	609a      	str	r2, [r3, #8]
 800447e:	60da      	str	r2, [r3, #12]
 8004480:	611a      	str	r2, [r3, #16]
 8004482:	615a      	str	r2, [r3, #20]
 8004484:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <MX_TIM3_Init+0xac>)
 8004488:	4a22      	ldr	r2, [pc, #136]	; (8004514 <MX_TIM3_Init+0xb0>)
 800448a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800448c:	4b20      	ldr	r3, [pc, #128]	; (8004510 <MX_TIM3_Init+0xac>)
 800448e:	2200      	movs	r2, #0
 8004490:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004492:	4b1f      	ldr	r3, [pc, #124]	; (8004510 <MX_TIM3_Init+0xac>)
 8004494:	2200      	movs	r2, #0
 8004496:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 839;
 8004498:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <MX_TIM3_Init+0xac>)
 800449a:	f240 3247 	movw	r2, #839	; 0x347
 800449e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <MX_TIM3_Init+0xac>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044a6:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <MX_TIM3_Init+0xac>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80044ac:	4818      	ldr	r0, [pc, #96]	; (8004510 <MX_TIM3_Init+0xac>)
 80044ae:	f7fe fb11 	bl	8002ad4 <HAL_TIM_PWM_Init>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80044b8:	f7ff fea6 	bl	8004208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044bc:	2300      	movs	r3, #0
 80044be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044c4:	f107 0320 	add.w	r3, r7, #32
 80044c8:	4619      	mov	r1, r3
 80044ca:	4811      	ldr	r0, [pc, #68]	; (8004510 <MX_TIM3_Init+0xac>)
 80044cc:	f7ff f9e4 	bl	8003898 <HAL_TIMEx_MasterConfigSynchronization>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80044d6:	f7ff fe97 	bl	8004208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044da:	2360      	movs	r3, #96	; 0x60
 80044dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 670;
 80044de:	f240 239e 	movw	r3, #670	; 0x29e
 80044e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80044ec:	1d3b      	adds	r3, r7, #4
 80044ee:	220c      	movs	r2, #12
 80044f0:	4619      	mov	r1, r3
 80044f2:	4807      	ldr	r0, [pc, #28]	; (8004510 <MX_TIM3_Init+0xac>)
 80044f4:	f7fe fd0e 	bl	8002f14 <HAL_TIM_PWM_ConfigChannel>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80044fe:	f7ff fe83 	bl	8004208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004502:	4803      	ldr	r0, [pc, #12]	; (8004510 <MX_TIM3_Init+0xac>)
 8004504:	f000 f8d2 	bl	80046ac <HAL_TIM_MspPostInit>

}
 8004508:	bf00      	nop
 800450a:	3728      	adds	r7, #40	; 0x28
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200002f4 	.word	0x200002f4
 8004514:	40000400 	.word	0x40000400

08004518 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800451e:	f107 0308 	add.w	r3, r7, #8
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	609a      	str	r2, [r3, #8]
 800452a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800452c:	463b      	mov	r3, r7
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004534:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <MX_TIM4_Init+0x94>)
 8004536:	4a1e      	ldr	r2, [pc, #120]	; (80045b0 <MX_TIM4_Init+0x98>)
 8004538:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16800;
 800453a:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <MX_TIM4_Init+0x94>)
 800453c:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8004540:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004542:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <MX_TIM4_Init+0x94>)
 8004544:	2200      	movs	r2, #0
 8004546:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8004548:	4b18      	ldr	r3, [pc, #96]	; (80045ac <MX_TIM4_Init+0x94>)
 800454a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800454e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004550:	4b16      	ldr	r3, [pc, #88]	; (80045ac <MX_TIM4_Init+0x94>)
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004556:	4b15      	ldr	r3, [pc, #84]	; (80045ac <MX_TIM4_Init+0x94>)
 8004558:	2200      	movs	r2, #0
 800455a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800455c:	4813      	ldr	r0, [pc, #76]	; (80045ac <MX_TIM4_Init+0x94>)
 800455e:	f7fe f9f9 	bl	8002954 <HAL_TIM_Base_Init>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004568:	f7ff fe4e 	bl	8004208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800456c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004570:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004572:	f107 0308 	add.w	r3, r7, #8
 8004576:	4619      	mov	r1, r3
 8004578:	480c      	ldr	r0, [pc, #48]	; (80045ac <MX_TIM4_Init+0x94>)
 800457a:	f7fe fd8d 	bl	8003098 <HAL_TIM_ConfigClockSource>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004584:	f7ff fe40 	bl	8004208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004588:	2300      	movs	r3, #0
 800458a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800458c:	2300      	movs	r3, #0
 800458e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004590:	463b      	mov	r3, r7
 8004592:	4619      	mov	r1, r3
 8004594:	4805      	ldr	r0, [pc, #20]	; (80045ac <MX_TIM4_Init+0x94>)
 8004596:	f7ff f97f 	bl	8003898 <HAL_TIMEx_MasterConfigSynchronization>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80045a0:	f7ff fe32 	bl	8004208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80045a4:	bf00      	nop
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	200002ac 	.word	0x200002ac
 80045b0:	40000800 	.word	0x40000800

080045b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a26      	ldr	r2, [pc, #152]	; (800465c <HAL_TIM_Base_MspInit+0xa8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d116      	bne.n	80045f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	4b25      	ldr	r3, [pc, #148]	; (8004660 <HAL_TIM_Base_MspInit+0xac>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	4a24      	ldr	r2, [pc, #144]	; (8004660 <HAL_TIM_Base_MspInit+0xac>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6453      	str	r3, [r2, #68]	; 0x44
 80045d6:	4b22      	ldr	r3, [pc, #136]	; (8004660 <HAL_TIM_Base_MspInit+0xac>)
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80045e2:	2200      	movs	r2, #0
 80045e4:	2100      	movs	r1, #0
 80045e6:	2019      	movs	r0, #25
 80045e8:	f7fd f843 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80045ec:	2019      	movs	r0, #25
 80045ee:	f7fd f85c 	bl	80016aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80045f2:	e02e      	b.n	8004652 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fc:	d10e      	bne.n	800461c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	4b17      	ldr	r3, [pc, #92]	; (8004660 <HAL_TIM_Base_MspInit+0xac>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	4a16      	ldr	r2, [pc, #88]	; (8004660 <HAL_TIM_Base_MspInit+0xac>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6413      	str	r3, [r2, #64]	; 0x40
 800460e:	4b14      	ldr	r3, [pc, #80]	; (8004660 <HAL_TIM_Base_MspInit+0xac>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	693b      	ldr	r3, [r7, #16]
}
 800461a:	e01a      	b.n	8004652 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a10      	ldr	r2, [pc, #64]	; (8004664 <HAL_TIM_Base_MspInit+0xb0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d115      	bne.n	8004652 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <HAL_TIM_Base_MspInit+0xac>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	4a0c      	ldr	r2, [pc, #48]	; (8004660 <HAL_TIM_Base_MspInit+0xac>)
 8004630:	f043 0304 	orr.w	r3, r3, #4
 8004634:	6413      	str	r3, [r2, #64]	; 0x40
 8004636:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <HAL_TIM_Base_MspInit+0xac>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004642:	2200      	movs	r2, #0
 8004644:	2100      	movs	r1, #0
 8004646:	201e      	movs	r0, #30
 8004648:	f7fd f813 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800464c:	201e      	movs	r0, #30
 800464e:	f7fd f82c 	bl	80016aa <HAL_NVIC_EnableIRQ>
}
 8004652:	bf00      	nop
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40010000 	.word	0x40010000
 8004660:	40023800 	.word	0x40023800
 8004664:	40000800 	.word	0x40000800

08004668 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a0b      	ldr	r2, [pc, #44]	; (80046a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d10d      	bne.n	8004696 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <HAL_TIM_PWM_MspInit+0x40>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	4a09      	ldr	r2, [pc, #36]	; (80046a8 <HAL_TIM_PWM_MspInit+0x40>)
 8004684:	f043 0302 	orr.w	r3, r3, #2
 8004688:	6413      	str	r3, [r2, #64]	; 0x40
 800468a:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <HAL_TIM_PWM_MspInit+0x40>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40023800 	.word	0x40023800

080046ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b4:	f107 030c 	add.w	r3, r7, #12
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]
 80046c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a12      	ldr	r2, [pc, #72]	; (8004714 <HAL_TIM_MspPostInit+0x68>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d11d      	bne.n	800470a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_TIM_MspPostInit+0x6c>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	4a10      	ldr	r2, [pc, #64]	; (8004718 <HAL_TIM_MspPostInit+0x6c>)
 80046d8:	f043 0302 	orr.w	r3, r3, #2
 80046dc:	6313      	str	r3, [r2, #48]	; 0x30
 80046de:	4b0e      	ldr	r3, [pc, #56]	; (8004718 <HAL_TIM_MspPostInit+0x6c>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80046ea:	2302      	movs	r3, #2
 80046ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ee:	2302      	movs	r3, #2
 80046f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046fa:	2302      	movs	r3, #2
 80046fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046fe:	f107 030c 	add.w	r3, r7, #12
 8004702:	4619      	mov	r1, r3
 8004704:	4805      	ldr	r0, [pc, #20]	; (800471c <HAL_TIM_MspPostInit+0x70>)
 8004706:	f7fd fb5b 	bl	8001dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800470a:	bf00      	nop
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40000400 	.word	0x40000400
 8004718:	40023800 	.word	0x40023800
 800471c:	40020400 	.word	0x40020400

08004720 <setYellowState>:
#include "utilities.h"
#include "dma.h"

void setYellowState(void){
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8004724:	2200      	movs	r2, #0
 8004726:	2110      	movs	r1, #16
 8004728:	4803      	ldr	r0, [pc, #12]	; (8004738 <setYellowState+0x18>)
 800472a:	f7fd fce5 	bl	80020f8 <HAL_GPIO_WritePin>
	MPPTState = MPPT_STATE_YELLOW;
 800472e:	4b03      	ldr	r3, [pc, #12]	; (800473c <setYellowState+0x1c>)
 8004730:	2201      	movs	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40021000 	.word	0x40021000
 800473c:	20000254 	.word	0x20000254

08004740 <resetYellowState>:

void resetYellowState(void){
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8004744:	2201      	movs	r2, #1
 8004746:	2110      	movs	r1, #16
 8004748:	4802      	ldr	r0, [pc, #8]	; (8004754 <resetYellowState+0x14>)
 800474a:	f7fd fcd5 	bl	80020f8 <HAL_GPIO_WritePin>
}
 800474e:	bf00      	nop
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000

08004758 <setRedState>:

void setRedState(void){
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 800475c:	2200      	movs	r2, #0
 800475e:	2120      	movs	r1, #32
 8004760:	4804      	ldr	r0, [pc, #16]	; (8004774 <setRedState+0x1c>)
 8004762:	f7fd fcc9 	bl	80020f8 <HAL_GPIO_WritePin>
	disablePWM();
 8004766:	f000 f83f 	bl	80047e8 <disablePWM>
	MPPTState = MPPT_STATE_RED;
 800476a:	4b03      	ldr	r3, [pc, #12]	; (8004778 <setRedState+0x20>)
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
}
 8004770:	bf00      	nop
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000
 8004778:	20000254 	.word	0x20000254

0800477c <resetRedState>:
void resetRedState(void){
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8004780:	2201      	movs	r2, #1
 8004782:	2120      	movs	r1, #32
 8004784:	4802      	ldr	r0, [pc, #8]	; (8004790 <resetRedState+0x14>)
 8004786:	f7fd fcb7 	bl	80020f8 <HAL_GPIO_WritePin>
}
 800478a:	bf00      	nop
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000

08004794 <setGreenState>:

void setGreenState(void){
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8004798:	2200      	movs	r2, #0
 800479a:	2140      	movs	r1, #64	; 0x40
 800479c:	4804      	ldr	r0, [pc, #16]	; (80047b0 <setGreenState+0x1c>)
 800479e:	f7fd fcab 	bl	80020f8 <HAL_GPIO_WritePin>
	enablePWM();
 80047a2:	f000 f815 	bl	80047d0 <enablePWM>
	MPPTState = MPPT_STATE_GREEN;
 80047a6:	4b03      	ldr	r3, [pc, #12]	; (80047b4 <setGreenState+0x20>)
 80047a8:	2202      	movs	r2, #2
 80047aa:	701a      	strb	r2, [r3, #0]
}
 80047ac:	bf00      	nop
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000
 80047b4:	20000254 	.word	0x20000254

080047b8 <resetGreenState>:
void resetGreenState(void){
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 80047bc:	2201      	movs	r2, #1
 80047be:	2140      	movs	r1, #64	; 0x40
 80047c0:	4802      	ldr	r0, [pc, #8]	; (80047cc <resetGreenState+0x14>)
 80047c2:	f7fd fc99 	bl	80020f8 <HAL_GPIO_WritePin>
}
 80047c6:	bf00      	nop
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000

080047d0 <enablePWM>:

void enablePWM(void){
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80047d4:	2201      	movs	r2, #1
 80047d6:	2101      	movs	r1, #1
 80047d8:	4802      	ldr	r0, [pc, #8]	; (80047e4 <enablePWM+0x14>)
 80047da:	f7fd fc8d 	bl	80020f8 <HAL_GPIO_WritePin>
}
 80047de:	bf00      	nop
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40020400 	.word	0x40020400

080047e8 <disablePWM>:
void disablePWM(void){
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80047ec:	2200      	movs	r2, #0
 80047ee:	2101      	movs	r1, #1
 80047f0:	4802      	ldr	r0, [pc, #8]	; (80047fc <disablePWM+0x14>)
 80047f2:	f7fd fc81 	bl	80020f8 <HAL_GPIO_WritePin>
}
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40020400 	.word	0x40020400

08004800 <readVoltageAndCurrent>:


void readVoltageAndCurrent(uint32_t * valueContainer){
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	//
	//Battery:  318 - 13V, 500 - 20V, 800 - 32V, 1783 - 73,7V, 1907 - 80V, 2500 - 140V
	//Array:  512 - 20V, 816 - 32V


	batteryVoltageADC = valueContainer[3];
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4a09      	ldr	r2, [pc, #36]	; (8004834 <readVoltageAndCurrent+0x34>)
 800480e:	6013      	str	r3, [r2, #0]
	batteryCurrentADC = valueContainer[1];
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a08      	ldr	r2, [pc, #32]	; (8004838 <readVoltageAndCurrent+0x38>)
 8004816:	6013      	str	r3, [r2, #0]

	arrayVoltageADC = valueContainer[2];
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a07      	ldr	r2, [pc, #28]	; (800483c <readVoltageAndCurrent+0x3c>)
 800481e:	6013      	str	r3, [r2, #0]
	arrayCurrentADC = valueContainer[0];
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a06      	ldr	r2, [pc, #24]	; (8004840 <readVoltageAndCurrent+0x40>)
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	20000288 	.word	0x20000288
 8004838:	200001b4 	.word	0x200001b4
 800483c:	20000160 	.word	0x20000160
 8004840:	20000220 	.word	0x20000220

08004844 <getArrayStatus>:

void getArrayStatus(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
	calculateMeasurementsAverage();
 8004848:	f000 f8ce 	bl	80049e8 <calculateMeasurementsAverage>

	if(arrayStatus == ARRAY_ERROR)
 800484c:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <getArrayStatus+0x64>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d111      	bne.n	8004878 <getArrayStatus+0x34>
	{
		if (averageArrayVoltage >= ARRAY_TURN_ON_TH)
 8004854:	4b15      	ldr	r3, [pc, #84]	; (80048ac <getArrayStatus+0x68>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
 800485c:	d903      	bls.n	8004866 <getArrayStatus+0x22>
				arrayStatus = ARRAY_OK;
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <getArrayStatus+0x64>)
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
			arrayStatus = ARRAY_OK;

		else if (averageArrayVoltage < ARRAY_TURN_OFF_TH)
			arrayStatus = ARRAY_ERROR;
	}
}
 8004864:	e01d      	b.n	80048a2 <getArrayStatus+0x5e>
		else if (averageArrayVoltage < ARRAY_TURN_ON_TH)
 8004866:	4b11      	ldr	r3, [pc, #68]	; (80048ac <getArrayStatus+0x68>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
 800486e:	d818      	bhi.n	80048a2 <getArrayStatus+0x5e>
			arrayStatus = ARRAY_ERROR;
 8004870:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <getArrayStatus+0x64>)
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
}
 8004876:	e014      	b.n	80048a2 <getArrayStatus+0x5e>
	else if (arrayStatus == ARRAY_OK)
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <getArrayStatus+0x64>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d110      	bne.n	80048a2 <getArrayStatus+0x5e>
		if (averageArrayVoltage >= ARRAY_TURN_OFF_TH)
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <getArrayStatus+0x68>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8004888:	d903      	bls.n	8004892 <getArrayStatus+0x4e>
			arrayStatus = ARRAY_OK;
 800488a:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <getArrayStatus+0x64>)
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]
}
 8004890:	e007      	b.n	80048a2 <getArrayStatus+0x5e>
		else if (averageArrayVoltage < ARRAY_TURN_OFF_TH)
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <getArrayStatus+0x68>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 800489a:	d802      	bhi.n	80048a2 <getArrayStatus+0x5e>
			arrayStatus = ARRAY_ERROR;
 800489c:	4b02      	ldr	r3, [pc, #8]	; (80048a8 <getArrayStatus+0x64>)
 800489e:	2200      	movs	r2, #0
 80048a0:	701a      	strb	r2, [r3, #0]
}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000229 	.word	0x20000229
 80048ac:	200001b0 	.word	0x200001b0

080048b0 <getBatteryStatus>:

void getBatteryStatus(void){
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
	calculateMeasurementsAverage();
 80048b4:	f000 f898 	bl	80049e8 <calculateMeasurementsAverage>

	if (batteryStatus == BATTERY_ERROR){
 80048b8:	4b24      	ldr	r3, [pc, #144]	; (800494c <getBatteryStatus+0x9c>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d11e      	bne.n	80048fe <getBatteryStatus+0x4e>
		if (averageBatteryVoltage >= BATTERY_ON_BOTTOM_TH || averageBatteryVoltage <= BATTERY_ON_UPPER_TH)
 80048c0:	4b23      	ldr	r3, [pc, #140]	; (8004950 <getBatteryStatus+0xa0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f240 724d 	movw	r2, #1869	; 0x74d
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d805      	bhi.n	80048d8 <getBatteryStatus+0x28>
 80048cc:	4b20      	ldr	r3, [pc, #128]	; (8004950 <getBatteryStatus+0xa0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f640 1206 	movw	r2, #2310	; 0x906
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d802      	bhi.n	80048de <getBatteryStatus+0x2e>
			batteryStatus = BATTERY_OK;
 80048d8:	4b1c      	ldr	r3, [pc, #112]	; (800494c <getBatteryStatus+0x9c>)
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
		if (averageBatteryVoltage < BATTERY_ON_BOTTOM_TH || averageBatteryVoltage > BATTERY_ON_UPPER_TH)
 80048de:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <getBatteryStatus+0xa0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f240 724d 	movw	r2, #1869	; 0x74d
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d905      	bls.n	80048f6 <getBatteryStatus+0x46>
 80048ea:	4b19      	ldr	r3, [pc, #100]	; (8004950 <getBatteryStatus+0xa0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f640 1206 	movw	r2, #2310	; 0x906
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d926      	bls.n	8004944 <getBatteryStatus+0x94>
			batteryStatus = BATTERY_ERROR;
 80048f6:	4b15      	ldr	r3, [pc, #84]	; (800494c <getBatteryStatus+0x9c>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]
		return ;
 80048fc:	e022      	b.n	8004944 <getBatteryStatus+0x94>

	} else if (batteryStatus == BATTERY_OK) {
 80048fe:	4b13      	ldr	r3, [pc, #76]	; (800494c <getBatteryStatus+0x9c>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d121      	bne.n	800494a <getBatteryStatus+0x9a>
		if (averageBatteryVoltage >= BATTERY_OFF_BOTTOM_TH || averageBatteryVoltage <= BATTERY_OFF_UPPER_TH)
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <getBatteryStatus+0xa0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f240 62d5 	movw	r2, #1749	; 0x6d5
 800490e:	4293      	cmp	r3, r2
 8004910:	d805      	bhi.n	800491e <getBatteryStatus+0x6e>
 8004912:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <getBatteryStatus+0xa0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f640 122e 	movw	r2, #2350	; 0x92e
 800491a:	4293      	cmp	r3, r2
 800491c:	d802      	bhi.n	8004924 <getBatteryStatus+0x74>
			batteryStatus = BATTERY_OK;
 800491e:	4b0b      	ldr	r3, [pc, #44]	; (800494c <getBatteryStatus+0x9c>)
 8004920:	2201      	movs	r2, #1
 8004922:	701a      	strb	r2, [r3, #0]
		if (averageBatteryVoltage < BATTERY_OFF_BOTTOM_TH || averageBatteryVoltage > BATTERY_OFF_UPPER_TH)
 8004924:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <getBatteryStatus+0xa0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f240 62d5 	movw	r2, #1749	; 0x6d5
 800492c:	4293      	cmp	r3, r2
 800492e:	d905      	bls.n	800493c <getBatteryStatus+0x8c>
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <getBatteryStatus+0xa0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f640 122e 	movw	r2, #2350	; 0x92e
 8004938:	4293      	cmp	r3, r2
 800493a:	d905      	bls.n	8004948 <getBatteryStatus+0x98>
			batteryStatus = BATTERY_ERROR;
 800493c:	4b03      	ldr	r3, [pc, #12]	; (800494c <getBatteryStatus+0x9c>)
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
		return;
 8004942:	e001      	b.n	8004948 <getBatteryStatus+0x98>
		return ;
 8004944:	bf00      	nop
 8004946:	e000      	b.n	800494a <getBatteryStatus+0x9a>
		return;
 8004948:	bf00      	nop
	}
}
 800494a:	bd80      	pop	{r7, pc}
 800494c:	200001a4 	.word	0x200001a4
 8004950:	200001ac 	.word	0x200001ac

08004954 <storeMeasurements>:


void storeMeasurements(void){
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
	if (lastMeasurementsIterator + 1 < NUMBER_OF_LAST_MEASUREMENTS)
 8004958:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <storeMeasurements+0x6c>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b0d      	cmp	r3, #13
 800495e:	d806      	bhi.n	800496e <storeMeasurements+0x1a>
		lastMeasurementsIterator++;
 8004960:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <storeMeasurements+0x6c>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	3301      	adds	r3, #1
 8004966:	b2da      	uxtb	r2, r3
 8004968:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <storeMeasurements+0x6c>)
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	e002      	b.n	8004974 <storeMeasurements+0x20>
	else
		lastMeasurementsIterator = 0;
 800496e:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <storeMeasurements+0x6c>)
 8004970:	2200      	movs	r2, #0
 8004972:	701a      	strb	r2, [r3, #0]

	readVoltageAndCurrent(valueContainerADC);
 8004974:	4813      	ldr	r0, [pc, #76]	; (80049c4 <storeMeasurements+0x70>)
 8004976:	f7ff ff43 	bl	8004800 <readVoltageAndCurrent>

	lastADCArrayVoltage[lastMeasurementsIterator] = arrayVoltageADC;
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <storeMeasurements+0x6c>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	4619      	mov	r1, r3
 8004980:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <storeMeasurements+0x74>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a11      	ldr	r2, [pc, #68]	; (80049cc <storeMeasurements+0x78>)
 8004986:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	lastADCArrayCurrent[lastMeasurementsIterator] = arrayCurrentADC;
 800498a:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <storeMeasurements+0x6c>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	4619      	mov	r1, r3
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <storeMeasurements+0x7c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a0f      	ldr	r2, [pc, #60]	; (80049d4 <storeMeasurements+0x80>)
 8004996:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	lastADCBatteryVoltage[lastMeasurementsIterator] = batteryVoltageADC;
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <storeMeasurements+0x6c>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	4619      	mov	r1, r3
 80049a0:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <storeMeasurements+0x84>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a0d      	ldr	r2, [pc, #52]	; (80049dc <storeMeasurements+0x88>)
 80049a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	lastADCBatteryCurrent[lastMeasurementsIterator] = batteryCurrentADC;
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <storeMeasurements+0x6c>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	4619      	mov	r1, r3
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <storeMeasurements+0x8c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a0b      	ldr	r2, [pc, #44]	; (80049e4 <storeMeasurements+0x90>)
 80049b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000228 	.word	0x20000228
 80049c4:	20000110 	.word	0x20000110
 80049c8:	20000160 	.word	0x20000160
 80049cc:	20000168 	.word	0x20000168
 80049d0:	20000220 	.word	0x20000220
 80049d4:	20000120 	.word	0x20000120
 80049d8:	20000288 	.word	0x20000288
 80049dc:	200000d4 	.word	0x200000d4
 80049e0:	200001b4 	.word	0x200001b4
 80049e4:	200001e4 	.word	0x200001e4

080049e8 <calculateMeasurementsAverage>:

void calculateMeasurementsAverage(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
	averageArrayVoltage = 0;
 80049ee:	4b2f      	ldr	r3, [pc, #188]	; (8004aac <calculateMeasurementsAverage+0xc4>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
	averageArrayCurrent = 0;
 80049f4:	4b2e      	ldr	r3, [pc, #184]	; (8004ab0 <calculateMeasurementsAverage+0xc8>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
	averageBatteryVoltage = 0;
 80049fa:	4b2e      	ldr	r3, [pc, #184]	; (8004ab4 <calculateMeasurementsAverage+0xcc>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
	averageBatteryCurrent = 0;
 8004a00:	4b2d      	ldr	r3, [pc, #180]	; (8004ab8 <calculateMeasurementsAverage+0xd0>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < NUMBER_OF_LAST_MEASUREMENTS; i++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	e026      	b.n	8004a5a <calculateMeasurementsAverage+0x72>
	{
		averageArrayVoltage += lastADCArrayVoltage[i];
 8004a0c:	4a2b      	ldr	r2, [pc, #172]	; (8004abc <calculateMeasurementsAverage+0xd4>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a14:	4b25      	ldr	r3, [pc, #148]	; (8004aac <calculateMeasurementsAverage+0xc4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4413      	add	r3, r2
 8004a1a:	4a24      	ldr	r2, [pc, #144]	; (8004aac <calculateMeasurementsAverage+0xc4>)
 8004a1c:	6013      	str	r3, [r2, #0]
		averageArrayCurrent += lastADCArrayCurrent[i];
 8004a1e:	4a28      	ldr	r2, [pc, #160]	; (8004ac0 <calculateMeasurementsAverage+0xd8>)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a26:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <calculateMeasurementsAverage+0xc8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <calculateMeasurementsAverage+0xc8>)
 8004a2e:	6013      	str	r3, [r2, #0]
		averageBatteryVoltage += lastADCBatteryVoltage[i];
 8004a30:	4a24      	ldr	r2, [pc, #144]	; (8004ac4 <calculateMeasurementsAverage+0xdc>)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a38:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <calculateMeasurementsAverage+0xcc>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <calculateMeasurementsAverage+0xcc>)
 8004a40:	6013      	str	r3, [r2, #0]
		averageBatteryCurrent += lastADCBatteryCurrent[i];
 8004a42:	4a21      	ldr	r2, [pc, #132]	; (8004ac8 <calculateMeasurementsAverage+0xe0>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <calculateMeasurementsAverage+0xd0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4413      	add	r3, r2
 8004a50:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <calculateMeasurementsAverage+0xd0>)
 8004a52:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < NUMBER_OF_LAST_MEASUREMENTS; i++)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3301      	adds	r3, #1
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b0e      	cmp	r3, #14
 8004a5e:	ddd5      	ble.n	8004a0c <calculateMeasurementsAverage+0x24>
	}

	averageArrayVoltage /= NUMBER_OF_LAST_MEASUREMENTS;
 8004a60:	4b12      	ldr	r3, [pc, #72]	; (8004aac <calculateMeasurementsAverage+0xc4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a19      	ldr	r2, [pc, #100]	; (8004acc <calculateMeasurementsAverage+0xe4>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	08db      	lsrs	r3, r3, #3
 8004a6c:	4a0f      	ldr	r2, [pc, #60]	; (8004aac <calculateMeasurementsAverage+0xc4>)
 8004a6e:	6013      	str	r3, [r2, #0]
	averageArrayCurrent /= NUMBER_OF_LAST_MEASUREMENTS;
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <calculateMeasurementsAverage+0xc8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a15      	ldr	r2, [pc, #84]	; (8004acc <calculateMeasurementsAverage+0xe4>)
 8004a76:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7a:	08db      	lsrs	r3, r3, #3
 8004a7c:	4a0c      	ldr	r2, [pc, #48]	; (8004ab0 <calculateMeasurementsAverage+0xc8>)
 8004a7e:	6013      	str	r3, [r2, #0]
	averageBatteryVoltage /= NUMBER_OF_LAST_MEASUREMENTS;
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <calculateMeasurementsAverage+0xcc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a11      	ldr	r2, [pc, #68]	; (8004acc <calculateMeasurementsAverage+0xe4>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	08db      	lsrs	r3, r3, #3
 8004a8c:	4a09      	ldr	r2, [pc, #36]	; (8004ab4 <calculateMeasurementsAverage+0xcc>)
 8004a8e:	6013      	str	r3, [r2, #0]
	averageBatteryCurrent /= NUMBER_OF_LAST_MEASUREMENTS;
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <calculateMeasurementsAverage+0xd0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a0d      	ldr	r2, [pc, #52]	; (8004acc <calculateMeasurementsAverage+0xe4>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	08db      	lsrs	r3, r3, #3
 8004a9c:	4a06      	ldr	r2, [pc, #24]	; (8004ab8 <calculateMeasurementsAverage+0xd0>)
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	200001b0 	.word	0x200001b0
 8004ab0:	200002a8 	.word	0x200002a8
 8004ab4:	200001ac 	.word	0x200001ac
 8004ab8:	200001b8 	.word	0x200001b8
 8004abc:	20000168 	.word	0x20000168
 8004ac0:	20000120 	.word	0x20000120
 8004ac4:	200000d4 	.word	0x200000d4
 8004ac8:	200001e4 	.word	0x200001e4
 8004acc:	88888889 	.word	0x88888889

08004ad0 <measurementsInit>:

void measurementsInit(void){
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
	lastMeasurementsIterator = 0;
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <measurementsInit+0x40>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]

	startReadingDMA(valueContainerADC);
 8004adc:	480d      	ldr	r0, [pc, #52]	; (8004b14 <measurementsInit+0x44>)
 8004ade:	f7ff fa23 	bl	8003f28 <startReadingDMA>

	HAL_Delay(100); // to get valuable ADC measurements
 8004ae2:	2064      	movs	r0, #100	; 0x64
 8004ae4:	f7fb fd5e 	bl	80005a4 <HAL_Delay>

	for(int i = 0; i < NUMBER_OF_LAST_MEASUREMENTS; i++){
 8004ae8:	2300      	movs	r3, #0
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	e007      	b.n	8004afe <measurementsInit+0x2e>
		storeMeasurements();
 8004aee:	f7ff ff31 	bl	8004954 <storeMeasurements>
		HAL_Delay(DELAY_BETWEEN_MEASUREMENTS);
 8004af2:	200a      	movs	r0, #10
 8004af4:	f7fb fd56 	bl	80005a4 <HAL_Delay>
	for(int i = 0; i < NUMBER_OF_LAST_MEASUREMENTS; i++){
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3301      	adds	r3, #1
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b0e      	cmp	r3, #14
 8004b02:	ddf4      	ble.n	8004aee <measurementsInit+0x1e>
	}

	calculateMeasurementsAverage();
 8004b04:	f7ff ff70 	bl	80049e8 <calculateMeasurementsAverage>
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000228 	.word	0x20000228
 8004b14:	20000110 	.word	0x20000110

08004b18 <checkArrayConnection>:

void checkArrayConnection(void){
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0

	getArrayStatus();
 8004b1c:	f7ff fe92 	bl	8004844 <getArrayStatus>

	if(arrayStatus == ARRAY_ERROR)
 8004b20:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <checkArrayConnection+0x34>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d105      	bne.n	8004b34 <checkArrayConnection+0x1c>
	{
		setRedState();
 8004b28:	f7ff fe16 	bl	8004758 <setRedState>
		resetGreenState();
 8004b2c:	f7ff fe44 	bl	80047b8 <resetGreenState>
		resetYellowState();
 8004b30:	f7ff fe06 	bl	8004740 <resetYellowState>
	}

	if(arrayStatus == ARRAY_OK)
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <checkArrayConnection+0x34>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d105      	bne.n	8004b48 <checkArrayConnection+0x30>
	{
		resetRedState();
 8004b3c:	f7ff fe1e 	bl	800477c <resetRedState>
		setGreenState();
 8004b40:	f7ff fe28 	bl	8004794 <setGreenState>
		resetYellowState();
 8004b44:	f7ff fdfc 	bl	8004740 <resetYellowState>
	}

}
 8004b48:	bf00      	nop
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20000229 	.word	0x20000229

08004b50 <checkBatteryConnection>:

void checkBatteryConnection(void){
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0

	getBatteryStatus();
 8004b54:	f7ff feac 	bl	80048b0 <getBatteryStatus>

	if(batteryStatus == BATTERY_ERROR)
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <checkBatteryConnection+0x34>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <checkBatteryConnection+0x1c>
	{
		setRedState();
 8004b60:	f7ff fdfa 	bl	8004758 <setRedState>
		resetGreenState();
 8004b64:	f7ff fe28 	bl	80047b8 <resetGreenState>
		resetYellowState();
 8004b68:	f7ff fdea 	bl	8004740 <resetYellowState>
	}
	if(batteryStatus == BATTERY_OK)
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <checkBatteryConnection+0x34>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d105      	bne.n	8004b80 <checkBatteryConnection+0x30>
	{
		resetRedState();
 8004b74:	f7ff fe02 	bl	800477c <resetRedState>
		setGreenState();
 8004b78:	f7ff fe0c 	bl	8004794 <setGreenState>
		resetYellowState();
 8004b7c:	f7ff fde0 	bl	8004740 <resetYellowState>
	}
}
 8004b80:	bf00      	nop
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	200001a4 	.word	0x200001a4

08004b88 <calculateInputPower>:

void calculateInputPower(void){
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
	inputPower = averageArrayCurrent * averageArrayVoltage;
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <calculateInputPower+0x20>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a06      	ldr	r2, [pc, #24]	; (8004bac <calculateInputPower+0x24>)
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	fb02 f303 	mul.w	r3, r2, r3
 8004b98:	4a05      	ldr	r2, [pc, #20]	; (8004bb0 <calculateInputPower+0x28>)
 8004b9a:	6013      	str	r3, [r2, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	200002a8 	.word	0x200002a8
 8004bac:	200001b0 	.word	0x200001b0
 8004bb0:	200001a8 	.word	0x200001a8

08004bb4 <setDutyCycle>:
void setDutyCycle(uint32_t dutyCyclePerMille){
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	TIM3->CCR4 = MAX_COUNTER_VALUE*dutyCyclePerMille;
 8004bbc:	4a06      	ldr	r2, [pc, #24]	; (8004bd8 <setDutyCycle+0x24>)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f240 3147 	movw	r1, #839	; 0x347
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40000400 	.word	0x40000400

08004bdc <MPPTInit>:

	prevStepDirection = STEP_DOWN;
}


void MPPTInit(void){
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
	prevStepDirection = STEP_UP;
 8004be0:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <MPPTInit+0x50>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
	// set duty cycle
	setDutyCycle(DUTY_CYCLE_INITIALIZED);
 8004be6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004bea:	f7ff ffe3 	bl	8004bb4 <setDutyCycle>

	// reset LED State
	resetYellowState();
 8004bee:	f7ff fda7 	bl	8004740 <resetYellowState>
	resetRedState();
 8004bf2:	f7ff fdc3 	bl	800477c <resetRedState>
	resetGreenState();
 8004bf6:	f7ff fddf 	bl	80047b8 <resetGreenState>

	// initialize array and battery status
	arrayStatus = ARRAY_ERROR;
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <MPPTInit+0x54>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
	batteryStatus = BATTERY_ERROR;
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <MPPTInit+0x58>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]

	disablePWM();
 8004c06:	f7ff fdef 	bl	80047e8 <disablePWM>

	measurementsInit();
 8004c0a:	f7ff ff61 	bl	8004ad0 <measurementsInit>
	checkArrayConnection();
 8004c0e:	f7ff ff83 	bl	8004b18 <checkArrayConnection>
	checkBatteryConnection();
 8004c12:	f7ff ff9d 	bl	8004b50 <checkBatteryConnection>

	if(MPPTState == MPPT_STATE_GREEN)
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <MPPTInit+0x5c>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d101      	bne.n	8004c22 <MPPTInit+0x46>
	{
		calculateInputPower();
 8004c1e:	f7ff ffb3 	bl	8004b88 <calculateInputPower>
	}
	isMPPTInitialised = 1;
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <MPPTInit+0x60>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]

}
 8004c28:	bf00      	nop
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000255 	.word	0x20000255
 8004c30:	20000229 	.word	0x20000229
 8004c34:	200001a4 	.word	0x200001a4
 8004c38:	20000254 	.word	0x20000254
 8004c3c:	2000015c 	.word	0x2000015c

08004c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c46:	e003      	b.n	8004c50 <LoopCopyDataInit>

08004c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c4e:	3104      	adds	r1, #4

08004c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c50:	480b      	ldr	r0, [pc, #44]	; (8004c80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c52:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c58:	d3f6      	bcc.n	8004c48 <CopyDataInit>
  ldr  r2, =_sbss
 8004c5a:	4a0b      	ldr	r2, [pc, #44]	; (8004c88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c5c:	e002      	b.n	8004c64 <LoopFillZerobss>

08004c5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c60:	f842 3b04 	str.w	r3, [r2], #4

08004c64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c64:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c68:	d3f9      	bcc.n	8004c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c6a:	f7ff fb47 	bl	80042fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c6e:	f000 f811 	bl	8004c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c72:	f7ff f9eb 	bl	800404c <main>
  bx  lr    
 8004c76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004c7c:	08004d2c 	.word	0x08004d2c
  ldr  r0, =_sdata
 8004c80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c84:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004c88:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004c8c:	200003cc 	.word	0x200003cc

08004c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c90:	e7fe      	b.n	8004c90 <ADC_IRQHandler>
	...

08004c94 <__libc_init_array>:
 8004c94:	b570      	push	{r4, r5, r6, lr}
 8004c96:	4d0d      	ldr	r5, [pc, #52]	; (8004ccc <__libc_init_array+0x38>)
 8004c98:	4c0d      	ldr	r4, [pc, #52]	; (8004cd0 <__libc_init_array+0x3c>)
 8004c9a:	1b64      	subs	r4, r4, r5
 8004c9c:	10a4      	asrs	r4, r4, #2
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	42a6      	cmp	r6, r4
 8004ca2:	d109      	bne.n	8004cb8 <__libc_init_array+0x24>
 8004ca4:	4d0b      	ldr	r5, [pc, #44]	; (8004cd4 <__libc_init_array+0x40>)
 8004ca6:	4c0c      	ldr	r4, [pc, #48]	; (8004cd8 <__libc_init_array+0x44>)
 8004ca8:	f000 f820 	bl	8004cec <_init>
 8004cac:	1b64      	subs	r4, r4, r5
 8004cae:	10a4      	asrs	r4, r4, #2
 8004cb0:	2600      	movs	r6, #0
 8004cb2:	42a6      	cmp	r6, r4
 8004cb4:	d105      	bne.n	8004cc2 <__libc_init_array+0x2e>
 8004cb6:	bd70      	pop	{r4, r5, r6, pc}
 8004cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cbc:	4798      	blx	r3
 8004cbe:	3601      	adds	r6, #1
 8004cc0:	e7ee      	b.n	8004ca0 <__libc_init_array+0xc>
 8004cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc6:	4798      	blx	r3
 8004cc8:	3601      	adds	r6, #1
 8004cca:	e7f2      	b.n	8004cb2 <__libc_init_array+0x1e>
 8004ccc:	08004d24 	.word	0x08004d24
 8004cd0:	08004d24 	.word	0x08004d24
 8004cd4:	08004d24 	.word	0x08004d24
 8004cd8:	08004d28 	.word	0x08004d28

08004cdc <memset>:
 8004cdc:	4402      	add	r2, r0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d100      	bne.n	8004ce6 <memset+0xa>
 8004ce4:	4770      	bx	lr
 8004ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cea:	e7f9      	b.n	8004ce0 <memset+0x4>

08004cec <_init>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	bf00      	nop
 8004cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf2:	bc08      	pop	{r3}
 8004cf4:	469e      	mov	lr, r3
 8004cf6:	4770      	bx	lr

08004cf8 <_fini>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	bf00      	nop
 8004cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfe:	bc08      	pop	{r3}
 8004d00:	469e      	mov	lr, r3
 8004d02:	4770      	bx	lr
